{"task_id": 11, "generation": "def remove_Occ(str, ch):\r\n    str = str.replace(ch, '')\r\n    return str\n"}
{"task_id": 12, "generation": "def sort_matrix(matrix):\r\n    for i in range(len(matrix)):\r\n        matrix[i] = sum(matrix[i])\r\n    matrix.sort()\r\n    return matrix\n"}
{"task_id": 13, "generation": "def count_common(test_list):\r\n    result = []\r\n    for i in test_list:\r\n        if i not in result:\r\n            result.append(i)\r\n    result.sort()\r\n    result.sort(key=test_list.count, reverse=True)\r\n    return result\n"}
{"task_id": 14, "generation": "def find_Volume(a,b,c):\r\n    return a*b*c\n"}
{"task_id": 15, "generation": "def split_lowerstring(test_string):\r\n    return [i for i in test_string if i.islower()]\n"}
{"task_id": 16, "generation": "```python\ndef text_lowercase_underscore(text):\r\n    result = \"Not matched!\"\r\n    for i in range(len(text)):\r\n        if text[i].islower():\r\n            if text[i+1].islower():\r\n                if text[i+2].islower():\r\n                    if text[i+3].islower():\r\n                        if text[i+4].islower():\r\n                            if text[i+5].islower():\r\n                                if text[i+6].islower():\r\n                                    if text[i+7].islower():\r\n                                        if text[i+8].islower():\r\n                                            if text[i+9].islower():\r\n                                                if text[i+10].islower():\r\n                                                    if text[i+11].islower():\r\n                                                        if text[i+12].islower():\r\n                                                            if text[i+13].islower():\r\n                                                                if text[i+14].islower():\r\n                                                                    if text[i+15].islower():\r\n                                                                        if text[i+16].islower():\r\n                                                                            if text[i+17].islower():\r\n                                                                                if text[i+18].islower():\r\n                                                                                    if text[i+19].islower():\r\n                                                                                        if text[i+20].islower():\r\n                                                                                            if text[i+21].islower():\r\n                                                                                                if text[i+22].islower():\r\n                                                                                                    if text[i+23].islower():\r\n                                                                                                        if text[i+24].islower():\r\n                                                                                                            if text[i+25].islower():\r\n                                                                                                                if text[i+26].islower():\r\n                                                                                                                    if text[i+27].islower():\r\n                                                                                                                        if text[i+28].islower():\r\n                                                                                                                            if text[i+29].islower():\r\n                                                                                                                                if text[i+30].islower():\r\n                                                                                                                                    if text[i+31].islower():\r\n                                                                                                                                        if text[i+32]."}
{"task_id": 17, "generation": "def square_perimeter(n):\r\n    return 4*n\n"}
{"task_id": 18, "generation": "def remove_dirty_chars(str1, str2):\r\n    result = \"\"\r\n    for i in str1:\r\n        if i not in str2:\r\n            result += i\r\n    return result\n"}
{"task_id": 19, "generation": "def test_duplicate(test_list):\r\n    result = False\r\n    for i in test_list:\r\n        if test_list.count(i) > 1:\r\n            result = True\r\n    return result\n"}
{"task_id": 20, "generation": "def is_woodall(n):\r\n    if n < 10:\r\n        return True\r\n    else:\r\n        return is_woodall(sum(int(i) for i in str(n)))\n"}
{"task_id": 21, "generation": "def multiples_of_num(n,m):\r\n    return [i*n for i in range(1,m+1)]\n"}
{"task_id": 22, "generation": "def find_first_duplicate(test_list):\r\n    for i in range(len(test_list)):\r\n        for j in range(i+1, len(test_list)):\r\n            if test_list[i] == test_list[j]:\r\n                return test_list[i]\r\n    return -1\n"}
{"task_id": 23, "generation": "def maximum_Sum(test_list):\r\n  sum = 0\r\n  for i in range(len(test_list)):\r\n    sum = sum + max(test_list[i])\r\n  return sum\n"}
{"task_id": 24, "generation": "def binary_to_decimal(n):\r\n    decimal_value = 0\r\n    base = 1\r\n    temp = n\r\n    while temp:\r\n        last_digit = temp % 10\r\n        decimal_value += last_digit * base\r\n        base = base * 2\r\n        temp = temp // 10\r\n    return decimal_value\n"}
{"task_id": 25, "generation": "def find_Product(arr,n):\r\n    prod = 1\r\n    for i in range(0,n):\r\n        prod = prod * arr[i]\r\n    return prod\n"}
{"task_id": 26, "generation": "def check_k_elements(test_tup_list, k):\r\n  res = True\r\n  for i in test_tup_list:\r\n    if len(i)!= k:\r\n      res = False\r\n  return res\n"}
{"task_id": 27, "generation": "def remove(test_list):\r\n  result = []\r\n  for i in test_list:\r\n    result.append(''.join(filter(str.isdigit, i)))\r\n  return result\n"}
{"task_id": 28, "generation": "def binomial_Coeff(n, k): \r\n    res = 1\r\n    if k > n - k: \r\n        k = n - k \r\n    for i in range(0, k): \r\n        res = res * (n - i) \r\n        res = res // (i + 1) \r\n    return res\n"}
{"task_id": 29, "generation": "def get_Odd_Occurrence(arr, n): \r\n    res = 0\r\n    for i in range(0, n): \r\n        res = res ^ arr[i] \r\n    return res\n"}
{"task_id": 30, "generation": "def count_Substring_With_Equal_Ends(s):\r\n    count = 0\r\n    for i in range(len(s)):\r\n        for j in range(i+1, len(s)+1):\r\n            if s[i:j] == s[i:j][::-1]:\r\n                count += 1\r\n    return count\n"}
{"task_id": 31, "generation": "import heapq\r\ndef func(lists, k):\r\n    heap = []\r\n    for i in lists:\r\n        for j in i:\r\n            if j not in heap:\r\n                heapq.heappush(heap, j)\r\n    return heapq.nlargest(k, heap)\n"}
{"task_id": 32, "generation": "def max_Prime_Factors(n):\r\n    max_prime = 0\r\n    while n % 2 == 0:\r\n        max_prime = 2\r\n        n = n / 2\r\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\r\n        while n % i == 0:\r\n            max_prime = i\r\n            n = n / i\r\n    if n > 2:\r\n        max_prime = n\r\n    return max_prime\n"}
{"task_id": 33, "generation": "def decimal_To_Binary(n):\r\n    return bin(n).replace(\"0b\", \"\")\n"}
{"task_id": 34, "generation": "def find_missing(arr, n): \r\n    for i in range(n): \r\n        if (arr[i]!= i + 1): \r\n            return i + 1\r\n    return n + 1\n"}
{"task_id": 35, "generation": "def find_rect_num(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return n * find_rect_num(n - 1)\n"}
{"task_id": 36, "generation": "def find_Nth_Digit(a,b,n):\r\n    a = a/b\r\n    a = str(a)\r\n    a = a.split('.')\r\n    a = a[1]\r\n    return int(a[n-1])\n"}
{"task_id": 37, "generation": "def sort_mixed_list(lst):\r\n    lst.sort(key=lambda x: (isinstance(x, int), x))\r\n    return lst\n"}
{"task_id": 38, "generation": "def div_even_odd(test_list):\r\n  even_list = []\r\n  odd_list = []\r\n  for i in test_list:\r\n    if i%2 == 0:\r\n      even_list.append(i)\r\n    else:\r\n      odd_list.append(i)\r\n  return (len(even_list)/len(odd_list))\n"}
{"task_id": 39, "generation": "def rearange_string(test_str):\r\n    test_str = sorted(test_str)\r\n    result = ''\r\n    for i in range(len(test_str)-1):\r\n        if test_str[i]!= test_str[i+1]:\r\n            result += test_str[i]\r\n    result += test_str[-1]\r\n    return result\n"}
{"task_id": 40, "generation": "from collections import Counter\r\ndef freq_element(test_list):\r\n  res = Counter(test_list)\r\n  return (res)\n"}
{"task_id": 41, "generation": "def filter_evennumbers(lst):\r\n    return list(filter(lambda x: x % 2 == 0, lst))\n"}
{"task_id": 42, "generation": "def find_Sum(arr, n): \r\n    sum = 0\r\n    for i in range(0, n): \r\n        for j in range(i + 1, n): \r\n            if (arr[i] == arr[j]): \r\n                sum = sum + arr[j] \r\n    return sum\n"}
{"task_id": 43, "generation": "import re\r\ndef text_match(text):\r\n    pattern = r\"^[a-z]+_[a-z]+$\"\r\n    if re.match(pattern, text):\r\n        return \"Found a match!\"\r\n    else:\r\n        return \"Not matched!\"\n"}
{"task_id": 44, "generation": "def text_match_string(text):\r\n    if text.startswith(\"python\"):\r\n        return \"Found a match!\"\r\n    else:\r\n        return \"Not matched!\"\n"}
{"task_id": 45, "generation": "def get_gcd(arr):\r\n    if len(arr) == 1:\r\n        return arr[0]\r\n    else:\r\n        return get_gcd([arr[0] // i for i in arr if arr[0] % i == 0])\n"}
{"task_id": 46, "generation": "def test_distinct(test_list):\r\n    return len(set(test_list)) == len(test_list)\n"}
{"task_id": 47, "generation": "def compute_Last_Digit(a,b):\r\n    if a==1 or b==1:\r\n        return 1\r\n    else:\r\n        return (a%10)*(b%10)%10\n"}
{"task_id": 48, "generation": "def odd_bit_set_number(n):\r\n    return n ^ (n - 1)\n"}
{"task_id": 49, "generation": "def specified_element(test_list, index):\r\n  res = []\r\n  for i in range(len(test_list)):\r\n    res.append(test_list[i][index])\r\n  return res\n"}
{"task_id": 50, "generation": "def min_length_list(test_list):\r\n    min_length = len(test_list[0])\r\n    min_list = test_list[0]\r\n    for i in test_list:\r\n        if len(i) < min_length:\r\n            min_length = len(i)\r\n            min_list = i\r\n    return (min_length, min_list)\n"}
{"task_id": 51, "generation": "def check_equilateral(a,b,c):\r\n    if a==b and b==c:\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 52, "generation": "def parallelogram_area(base, height):\r\n    return base * height\n"}
{"task_id": 53, "generation": "def check_Equality(test_str):\r\n    if test_str[0] == test_str[-1]:\r\n        return \"Equal\"\r\n    else:\r\n        return \"Not Equal\"\n"}
{"task_id": 54, "generation": "def counting_sort(arr):\r\n    max_element = max(arr)\r\n    count = [0] * (max_element + 1)\r\n    for i in range(0, len(arr)):\r\n        count[arr[i]] += 1\r\n    for i in range(1, len(count)):\r\n        count[i] += count[i - 1]\r\n    output = [0] * len(arr)\r\n    for i in range(len(arr) - 1, -1, -1):\r\n        output[count[arr[i]] - 1] = arr[i]\r\n        count[arr[i]] -= 1\r\n    return output\n"}
{"task_id": 55, "generation": "def tn_gp(a,r,n):\r\n    return a*r**(n-1)\n"}
{"task_id": 56, "generation": "def check(n):\r\n    if n < 10:\r\n        return False\r\n    else:\r\n        rev = int(str(n)[::-1])\r\n        if n == rev - 1:\r\n            return True\r\n        else:\r\n            return False\n"}
{"task_id": 57, "generation": "def find_Max_Num(digits, n):\r\n    digits.sort()\r\n    digits.reverse()\r\n    num = \"\"\r\n    for i in range(n):\r\n        num += str(digits[i])\r\n    return int(num)\n"}
{"task_id": 58, "generation": "def opposite_Signs(a,b):\r\n    if a*b < 0:\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 59, "generation": "def is_octagonal(n):\r\n    return (n*(3*n-1))//2\n"}
{"task_id": 60, "generation": "def max_len_sub(arr, n):\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if abs(arr[i] - arr[j]) == 1:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\n"}
{"task_id": 61, "generation": "def count_Substrings(s, n):\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n+1):\r\n            if sum(map(int, list(s[i:j]))) == len(s[i:j]):\r\n                count += 1\r\n    return count\n"}
{"task_id": 62, "generation": "def smallest_num(test_list):\r\n  return min(test_list)\n"}
{"task_id": 63, "generation": "def max_difference(test_tup):\r\n  res = []\r\n  for i in range(len(test_tup)):\r\n    for j in range(i+1, len(test_tup)):\r\n      res.append(abs(test_tup[i][0] - test_tup[j][0]) + abs(test_tup[i][1] - test_tup[j][1]))\r\n  return max(res)\n"}
{"task_id": 64, "generation": "def subject_marks(marks):\r\n    return sorted(marks, key=lambda x: x[1])\n"}
{"task_id": 65, "generation": "def recursive_list_sum(lst):\r\n    if type(lst) is not list:\r\n        return lst\r\n    else:\r\n        return sum(map(recursive_list_sum, lst))\n"}
{"task_id": 66, "generation": "def pos_count(test_list):\r\n  count = 0\r\n  for i in test_list:\r\n    if i > 0:\r\n      count += 1\r\n  return count\n"}
{"task_id": 67, "generation": "```python\ndef bell_number(n):\r\n    if n == 0:\r\n        return 1\r\n    if n == 1:\r\n        return 1\r\n    if n == 2:\r\n        return 2\r\n    if n == 3:\r\n        return 5\r\n    if n == 4:\r\n        return 14\r\n    if n == 5:\r\n        return 42\r\n    if n == 6:\r\n        return 132\r\n    if n == 7:\r\n        return 429\r\n    if n == 8:\r\n        return 1430\r\n    if n == 9:\r\n        return 4862\r\n    if n == 10:\r\n        return 16796\r\n    if n == 11:\r\n        return 58786\r\n    if n == 12:\r\n        return 208012\r\n    if n == 13:\r\n        return 742900\r\n    if n == 14:\r\n        return 2674440\r\n    if n == 15:\r\n        return 9694845\r\n    if n == 16:\r\n        return 35357670\r\n    if n == 17:\r\n        return 129644790\r\n    if n == 18:\r\n        return 477638700\r\n    if n == 19:\r\n        return 1767263190\r\n    if n == 20:\r\n        return 6564120420\r\n    if n == 21:\r\n        return 24466267020\r\n    if n == 22:\r\n        return 91482563640\r\n    if n == 23:\r\n        return 343059613650\r\n    if n == 24:\r\n        return 1289904147324\r\n    if n == 25:\r\n"}
{"task_id": 68, "generation": "def is_Monotonic(A):\r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"}
{"task_id": 69, "generation": "def is_sublist(list1, list2):\r\n    for i in range(len(list1)):\r\n        if list1[i:i+len(list2)] == list2:\r\n            return True\r\n    return False\n"}
{"task_id": 70, "generation": "def get_equal(test_tup, length):\r\n    result = 'All tuples have same length'\r\n    for i in range(len(test_tup)):\r\n        if len(test_tup[i])!= length:\r\n            result = 'All tuples do not have same length'\r\n    return result\n"}
{"task_id": 71, "generation": "def comb_sort(lst):\r\n    gap = len(lst)\r\n    swapped = True\r\n    while gap > 1 or swapped:\r\n        gap = max(1, int(gap / 1.3))\r\n        swapped = False\r\n        for i in range(len(lst) - gap):\r\n            if lst[i] > lst[i + gap]:\r\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\r\n                swapped = True\r\n    return lst\n"}
{"task_id": 72, "generation": "import math\r\ndef dif_Square(n):\r\n    if n == 1:\r\n        return True\r\n    else:\r\n        for i in range(1, int(math.sqrt(n)) + 1):\r\n            if (n - i * i) % (2 * i) == 0:\r\n                return True\r\n        return False\n"}
{"task_id": 73, "generation": "import re\r\ndef multiple_split(string):\r\n    return re.split('\\*|\\n', string)\n"}
{"task_id": 74, "generation": "def is_samepatterns(patterns, sequence):\r\n    if len(patterns)!= len(sequence):\r\n        return False\r\n    for i in range(len(patterns)):\r\n        if patterns[i]!= sequence[i]:\r\n            return False\r\n    return True\n"}
{"task_id": 75, "generation": "def find_tuples(test_tuples, k):\r\n    res = []\r\n    for i in test_tuples:\r\n        if all(x % k == 0 for x in i):\r\n            res.append(i)\r\n    return res\n"}
{"task_id": 76, "generation": "def count_Squares(m,n):\r\n    return (m*n) - (m+n-1)\n"}
{"task_id": 77, "generation": "def is_Diff(n):\r\n    sum_even = 0\r\n    sum_odd = 0\r\n    while n > 0:\r\n        r = n % 10\r\n        if r % 2 == 0:\r\n            sum_even += r\r\n        else:\r\n            sum_odd += r\r\n        n = n // 10\r\n    if sum_even == sum_odd:\r\n        return False\r\n    else:\r\n        return True\n"}
{"task_id": 78, "generation": "def count_With_Odd_SetBits(n):\r\n    count = 0\r\n    while n:\r\n        count += n & 1\r\n        n >>= 1\r\n    return count\n"}
{"task_id": 79, "generation": "def word_len(word):\r\n    if len(word) % 2 == 0:\r\n        return False\r\n    else:\r\n        return True\n"}
{"task_id": 80, "generation": "def tetrahedral_number(n):\r\n    return (n*(n+1)*(n+2))/6\n"}
{"task_id": 81, "generation": "def zip_tuples(tup1, tup2):\r\n    return list(zip(tup1, tup2))\n"}
{"task_id": 82, "generation": "def volume_sphere(r):\r\n    return 4/3*3.14*r**3\n"}
{"task_id": 83, "generation": "def get_Char(str):\r\n    sum = 0\r\n    for i in str:\r\n        sum = sum + ord(i)\r\n    return chr(sum)\n"}
{"task_id": 84, "generation": "def sequence(n):\r\n    if n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 1\r\n    else:\r\n        return sequence(n-1) + sequence(n-2)\n"}
{"task_id": 85, "generation": "import math\r\ndef surfacearea_sphere(r):\r\n    return 4*math.pi*r**2\n"}
{"task_id": 86, "generation": "def centered_hexagonal_number(n):\r\n    return (n*(2*n-1))+1\n"}
{"task_id": 87, "generation": "def merge_dictionaries_three(dict1, dict2, dict3):\r\n    dict1.update(dict2)\r\n    dict1.update(dict3)\r\n    return dict1\n"}
{"task_id": 88, "generation": "def freq_count(lst):\r\n    return {i:lst.count(i) for i in lst}\n"}
{"task_id": 89, "generation": "def closest_num(n):\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        for i in range(n):\r\n            if i < n:\r\n                if i * (i + 1) > n:\r\n                    return i\n"}
{"task_id": 90, "generation": "def len_log(test_list):\r\n    max_len = 0\r\n    for word in test_list:\r\n        if len(word) > max_len:\r\n            max_len = len(word)\r\n    return max_len\n"}
{"task_id": 91, "generation": "def find_substring(test_list, test_substring):\r\n  result = False\r\n  for i in test_list:\r\n    if test_substring in i:\r\n      result = True\r\n  return result\n"}
{"task_id": 92, "generation": "def is_undulating(n):\r\n    if len(n) == 1:\r\n        return True\r\n    else:\r\n        if n[0] == n[1]:\r\n            return is_undulating(n[1:])\r\n        else:\r\n            return False\n"}
{"task_id": 93, "generation": "def power(a, b):\r\n    if b == 0:\r\n        return 1\r\n    else:\r\n        return a * power(a, b-1)\n"}
{"task_id": 94, "generation": "def index_minimum(test_tuples):\r\n  return min(test_tuples, key=lambda x: x[1])[0]\n"}
{"task_id": 95, "generation": "def Find_Min_Length(test_list):\r\n    min_length = len(test_list[0])\r\n    for i in range(len(test_list)):\r\n        if len(test_list[i]) < min_length:\r\n            min_length = len(test_list[i])\r\n    return min_length\n"}
{"task_id": 96, "generation": "def divisor(n):\r\n    count = 0\r\n    for i in range(1, n+1):\r\n        if n % i == 0:\r\n            count += 1\r\n    return count\n"}
{"task_id": 97, "generation": "def frequency_lists(test_list):\r\n    result = {}\r\n    for i in test_list:\r\n        for j in i:\r\n            if j in result:\r\n                result[j] += 1\r\n            else:\r\n                result[j] = 1\r\n    return result\n"}
{"task_id": 98, "generation": "def multiply_num(test_list):\r\n    result = 1\r\n    for i in test_list:\r\n        result = result * i\r\n    return result / len(test_list)\n"}
{"task_id": 99, "generation": "def decimal_to_binary(n):\r\n    return bin(n).replace(\"0b\", \"\")\n"}
{"task_id": 100, "generation": "def next_smallest_palindrome(n):\r\n    n = n + 1\r\n    while not is_palindrome(n):\r\n        n = n + 1\r\n    return n\r\n\r\ndef is_palindrome(n):\r\n    return str(n) == str(n)[::-1]\n"}
{"task_id": 101, "generation": "def kth_element(arr, n, k):\r\n    arr.sort()\r\n    return arr[k-1]\n"}
{"task_id": 102, "generation": "def snake_to_camel(s):\r\n    return ''.join(x.capitalize() or '_' for x in s.split('_'))\n"}
{"task_id": 103, "generation": "def eulerian_num(n, m):\r\n    if n == 1:\r\n        return m\r\n    else:\r\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n"}
{"task_id": 104, "generation": "def sort_sublists(test_list):\r\n    return sorted(test_list, key=lambda x: x[0])\n"}
{"task_id": 105, "generation": "def count(test_list):\r\n    count = 0\r\n    for i in test_list:\r\n        if i == True:\r\n            count += 1\r\n    return count\n"}
{"task_id": 106, "generation": "def add_lists(test_list, test_tup):\r\n  res = test_tup + tuple(test_list)\r\n  return res\n"}
{"task_id": 107, "generation": "def count_Hexadecimal(start, end):\r\n    count = 0\r\n    for i in range(start, end + 1):\r\n        if len(str(hex(i))) == 4:\r\n            count += 1\r\n    return count\n"}
{"task_id": 108, "generation": "import heapq\r\ndef merge_sorted_list(list1, list2, list3):\r\n    heap = []\r\n    for i in list1:\r\n        heapq.heappush(heap, i)\r\n    for i in list2:\r\n        heapq.heappush(heap, i)\r\n    for i in list3:\r\n        heapq.heappush(heap, i)\r\n    return heap\n"}
{"task_id": 109, "generation": "def odd_Equivalent(s,n):\r\n    count = 0\r\n    for i in range(0,n):\r\n        if s[i] == '1':\r\n            count += 1\r\n    return count\n"}
{"task_id": 110, "generation": "def extract_missing(test_list, start, end):\r\n    res = []\r\n    for i in range(start, end+1):\r\n        if i not in test_list:\r\n            res.append((i, i+1))\r\n    return res\n"}
{"task_id": 111, "generation": "def common_in_nested_lists(test_list):\r\n    res = []\r\n    for i in test_list:\r\n        for j in i:\r\n            if i.count(j) > 1:\r\n                res.append(j)\r\n    return res\n"}
{"task_id": 112, "generation": "import math\r\ndef perimeter(r,h):\r\n    return 2*math.pi*r*h + 2*math.pi*r**2\r\n"}
{"task_id": 113, "generation": "def check_integer(s):\r\n    try:\r\n        int(s)\r\n        return True\r\n    except ValueError:\r\n        return False\n"}
{"task_id": 114, "generation": "def assign_freq(test_tup_list):\r\n  res = []\r\n  for i in test_tup_list:\r\n    if i not in res:\r\n      res.append(i)\r\n  for i in res:\r\n    res[res.index(i)] = res[res.index(i)].count(i)\r\n  return res\n"}
{"task_id": 115, "generation": "def empty_dit(dit):\r\n    for i in dit:\r\n        if len(i)>0:\r\n            return False\r\n    return True\n"}
{"task_id": 116, "generation": "def tuple_to_int(test_tup):\r\n  res = int(''.join(map(str, test_tup)))\r\n  return res\n"}
{"task_id": 117, "generation": "def list_to_float(test_list):\r\n    res = []\r\n    for i in test_list:\r\n        res.append(tuple(map(float, i)))\r\n    return res\n"}
{"task_id": 118, "generation": "def string_to_list(test_string):\r\n  return test_string.split()\n"}
{"task_id": 119, "generation": "def search(arr, n): \r\n    low = 0\r\n    high = len(arr) - 1\r\n    while low <= high: \r\n        mid = (high + low) // 2\r\n        if (mid == 0 or arr[mid]!= arr[mid - 1]) and (mid == len(arr) - 1 or arr[mid]!= arr[mid + 1]): \r\n            return arr[mid] \r\n        if mid % 2 == 0: \r\n            if arr[mid] == arr[mid + 1]: \r\n                low = mid + 1\r\n            else: \r\n                high = mid - 1\r\n        else: \r\n            if arr[mid] == arr[mid - 1]: \r\n                low = mid + 1\r\n            else: \r\n                high = mid - 1\r\n    return -1\n"}
{"task_id": 120, "generation": "def max_product_tuple(test_tup):\r\n  res = []\r\n  for i in range(len(test_tup)):\r\n    for j in range(i+1, len(test_tup)):\r\n      res.append(test_tup[i][0]*test_tup[j][1])\r\n  return max(res)\n"}
{"task_id": 121, "generation": "def check_triplet(arr, n, x, y): \r\n    arr.sort() \r\n    for i in range(0, n-2): \r\n        l = i + 1\r\n        r = n - 1\r\n        while l < r: \r\n            if arr[i] + arr[l] + arr[r] == x: \r\n                return True\r\n            elif arr[i] + arr[l] + arr[r] < y: \r\n                l += 1\r\n            else: \r\n                r -= 1\r\n    return False\n"}
{"task_id": 122, "generation": "def smartNumber(n):\r\n    if n == 1:\r\n        return 30\r\n    else:\r\n        return smartNumber(n-1) + 30\n"}
{"task_id": 123, "generation": "def amicable_numbers_sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += sum_of_divisors(i)\r\n    return sum\r\n\r\ndef sum_of_divisors(n):\r\n    sum = 0\r\n    for i in range(1, n):\r\n        if n % i == 0:\r\n            sum += i\r\n    return sum\n"}
{"task_id": 124, "generation": "import math\r\ndef angle_complex(x,y):\r\n    return math.atan2(y.imag, x.real)\n"}
{"task_id": 125, "generation": "def find_length(binary_string, n): \r\n    count_0 = 0\r\n    count_1 = 0\r\n    max_diff = 0\r\n    for i in range(n): \r\n        if binary_string[i] == '0': \r\n            count_0 += 1\r\n        else: \r\n            count_1 += 1\r\n        max_diff = max(max_diff, count_0 - count_1) \r\n    return max_diff\n"}
{"task_id": 126, "generation": "def sum(a,b):\r\n    sum = 0\r\n    for i in range(1,a+1):\r\n        if a%i == 0:\r\n            sum = sum + i\r\n    for i in range(1,b+1):\r\n        if b%i == 0:\r\n            sum = sum + i\r\n    return sum\n"}
{"task_id": 127, "generation": "def multiply_int(a,b):\r\n    if b==0:\r\n        return 0\r\n    if b==1:\r\n        return a\r\n    return a+multiply_int(a,b-1)\n"}
{"task_id": 128, "generation": "def long_words(n,s):\r\n    s = s.split()\r\n    result = []\r\n    for i in s:\r\n        if len(i) > n:\r\n            result.append(i)\r\n    return result\n"}
{"task_id": 129, "generation": "def magic_square_test(square):\r\n    sum_row = sum(square[0])\r\n    sum_col = sum(i[0] for i in square)\r\n    sum_diag1 = sum(square[i][i] for i in range(len(square)))\r\n    sum_diag2 = sum(square[i][len(square)-i-1] for i in range(len(square)))\r\n    return sum_row == sum_col == sum_diag1 == sum_diag2\n"}
{"task_id": 130, "generation": "def max_occurrences(test_list):\r\n  max_count = 0\r\n  max_item = None\r\n  for item in test_list:\r\n    count = test_list.count(item)\r\n    if count > max_count:\r\n      max_count = count\r\n      max_item = item\r\n  return (max_item, max_count)\n"}
{"task_id": 131, "generation": "def reverse_vowels(s):\r\n    vowels = \"aeiouAEIOU\"\r\n    s = list(s)\r\n    i, j = 0, len(s) - 1\r\n    while i < j:\r\n        if s[i] not in vowels:\r\n            i += 1\r\n        elif s[j] not in vowels:\r\n            j -= 1\r\n        else:\r\n            s[i], s[j] = s[j], s[i]\r\n            i += 1\r\n            j -= 1\r\n    return \"\".join(s)\n"}
{"task_id": 132, "generation": "def tup_string(test_tup):\r\n  return ''.join(test_tup)\n"}
{"task_id": 133, "generation": "def sum_negativenum(lst):\r\n    return sum(filter(lambda x: x < 0, lst))\n"}
{"task_id": 134, "generation": "def check_last(arr,p,q):\r\n    if arr[-1]%2==0:\r\n        for i in range(p):\r\n            arr[-1]=arr[-1]+q\r\n        return \"EVEN\"\r\n    else:\r\n        for i in range(p):\r\n            arr[-1]=arr[-1]+q\r\n        return \"ODD\"\n"}
{"task_id": 135, "generation": "def hexagonal_num(n):\r\n    return (n*(2*n-1))\n"}
{"task_id": 136, "generation": "def cal_electbill(kwh):\r\n    if kwh <= 100:\r\n        return kwh * 0.60\r\n    elif kwh <= 200:\r\n        return 100 * 0.60 + (kwh - 100) * 0.55\r\n    else:\r\n        return 100 * 0.60 + 100 * 0.55 + (kwh - 200) * 0.40\r\n"}
{"task_id": 137, "generation": "def zero_count(arr):\r\n    count = 0\r\n    for i in arr:\r\n        if i == 0:\r\n            count += 1\r\n    return count/len(arr)\n"}
{"task_id": 138, "generation": "def is_Sum_Of_Powers_Of_Two(n):\r\n    if n == 0:\r\n        return True\r\n    while n!= 1:\r\n        if n % 2!= 0:\r\n            return False\r\n        n = n // 2\r\n    return True\n"}
{"task_id": 139, "generation": "import math\r\ndef circle_circumference(r):\r\n    return 2*math.pi*r\n"}
{"task_id": 140, "generation": "def extract_singly(test_tup):\r\n  res = []\r\n  for i in test_tup:\r\n    if i not in res:\r\n      res.append(i)\r\n  return res\n"}
{"task_id": 141, "generation": "def pancake_sort(arr):\r\n    for i in range(len(arr)-1, 0, -1):\r\n        max_pos = i\r\n        for j in range(i):\r\n            if arr[j] > arr[max_pos]:\r\n                max_pos = j\r\n        if max_pos!= i:\r\n            arr[i], arr[max_pos] = arr[max_pos], arr[i]\r\n            for j in range(max_pos+1):\r\n                arr[j], arr[i-j] = arr[i-j], arr[j]\r\n    return arr\n"}
{"task_id": 142, "generation": "def count_samepair(list1, list2, list3):\r\n    count = 0\r\n    for i in list1:\r\n        for j in list2:\r\n            if i == j:\r\n                count += 1\r\n    for i in list2:\r\n        for j in list3:\r\n            if i == j:\r\n                count += 1\r\n    for i in list3:\r\n        for j in list1:\r\n            if i == j:\r\n                count += 1\r\n    return count\n"}
{"task_id": 143, "generation": "def find_lists(test_tup):\r\n  res = []\r\n  for i in test_tup:\r\n    if i not in res:\r\n      res.append(i)\r\n  return len(res)\n"}
{"task_id": 144, "generation": "def sum_Pairs(arr, k):\r\n    result = []\r\n    for i in range(len(arr)):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i]+arr[j] == k:\r\n                result.append((arr[i],arr[j]))\r\n    return result\n"}
{"task_id": 145, "generation": "def max_Abs_Diff(arr, n): \r\n    max_diff = arr[1] - arr[0] \r\n    min_val = arr[0] \r\n    for i in range(1, n): \r\n        if arr[i] - min_val > max_diff: \r\n            max_diff = arr[i] - min_val \r\n        if arr[i] < min_val: \r\n            min_val = arr[i] \r\n    return max_diff\n"}
{"task_id": 146, "generation": "def ascii_value_string(str):\r\n    sum = 0\r\n    for i in str:\r\n        sum = sum + ord(i)\r\n    return sum\n"}
{"task_id": 147, "generation": "def max_path_sum(triangle, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = triangle[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + triangle[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + triangle[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = max(tc[i-1][j-1], tc[i-1][j]) + triangle[i][j] \r\n\treturn tc[m][n]\n"}
{"task_id": 148, "generation": "def sum_digits_twoparts(n):\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return sum_digits_twoparts(n//10) + n%10\n"}
{"task_id": 149, "generation": "def longest_subseq_with_diff_one(arr, n): \r\n    dp = [1] * n \r\n    for i in range(1, n): \r\n        for j in range(0, i): \r\n            if (arr[i] - arr[j] == 1 or arr[j] - arr[i] == 1): \r\n                dp[i] = max(dp[i], dp[j] + 1) \r\n    return max(dp)\n"}
{"task_id": 150, "generation": "def does_Contain_B(a,b,c):\r\n    if a==b:\r\n        return True\r\n    elif a==c:\r\n        return True\r\n    elif b==c:\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 151, "generation": "def is_coprime(a, b):\r\n    if a > b:\r\n        smaller = b\r\n    else:\r\n        smaller = a\r\n    for i in range(1, smaller + 1):\r\n        if (a % i == 0) and (b % i == 0):\r\n            gcd = i\r\n    if gcd == 1:\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 152, "generation": "def merge_sort(arr):\r\n    if len(arr) > 1:\r\n        mid = len(arr)//2\r\n        L = arr[:mid]\r\n        R = arr[mid:]\r\n        merge_sort(L)\r\n        merge_sort(R)\r\n        i = j = k = 0\r\n        while i < len(L) and j < len(R):\r\n            if L[i] < R[j]:\r\n                arr[k] = L[i]\r\n                i += 1\r\n            else:\r\n                arr[k] = R[j]\r\n                j += 1\r\n            k += 1\r\n        while i < len(L):\r\n            arr[k] = L[i]\r\n            i += 1\r\n            k += 1\r\n        while j < len(R):\r\n            arr[k] = R[j]\r\n            j += 1\r\n            k += 1\r\n    return arr\n"}
{"task_id": 153, "generation": "import math\r\ndef parabola_vertex(a, b, c):\r\n    x1 = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\r\n    x2 = (-b - math.sqrt(b**2 - 4*a*c))/(2*a)\r\n    return (x1, x2)\n"}
{"task_id": 154, "generation": "def specified_element(test_list, index):\r\n  res = []\r\n  for i in test_list:\r\n    res.append(i[index])\r\n  return res\n"}
{"task_id": 155, "generation": "def even_bit_toggle_number(n):\r\n    return n ^ 0xAAAAAAAA\r\n"}
{"task_id": 156, "generation": "def tuple_int_str(test_tup):\r\n  res = tuple(map(int, test_tup))\r\n  return res\n"}
{"task_id": 157, "generation": "def encode_list(test_list):\r\n    result = []\r\n    for i in test_list:\r\n        if i not in result:\r\n            result.append(i)\r\n    result.sort()\r\n    result = [(test_list.count(i), i) for i in result]\r\n    return result\n"}
{"task_id": 158, "generation": "def min_Ops(arr, n, k): \r\n    if k == 0: \r\n        return 0\r\n    if n == 1: \r\n        return 0\r\n    if k > n: \r\n        return -1\r\n    min_val = min(arr) \r\n    max_val = max(arr) \r\n    if max_val - min_val == k: \r\n        return 0\r\n    if (max_val - min_val) % (k - 1)!= 0: \r\n        return -1\r\n    diff = (max_val - min_val) // (k - 1) \r\n    count = 0\r\n    for i in range(n): \r\n        if arr[i]!= min_val + i * diff: \r\n            count += 1\r\n    return count\n"}
{"task_id": 159, "generation": "def month_season(month,day):\r\n    if month=='January' or month=='February' or month=='December':\r\n        if day>=1 and day<=19:\r\n            return('winter')\r\n        elif day>=20 and day<=31:\r\n            return('spring')\r\n        else:\r\n            return('autumn')\r\n    elif month=='March' or month=='April' or month=='May':\r\n        if day>=1 and day<=19:\r\n            return('spring')\r\n        elif day>=20 and day<=31:\r\n            return('summer')\r\n        else:\r\n            return('autumn')\r\n    elif month=='June' or month=='July' or month=='August':\r\n        if day>=1 and day<=19:\r\n            return('summer')\r\n        elif day>=20 and day<=31:\r\n            return('autumn')\r\n        else:\r\n            return('winter')\r\n    elif month=='September' or month=='October' or month=='November':\r\n        if day>=1 and day<=19:\r\n            return('autumn')\r\n        elif day>=20 and day<=31:\r\n            return('winter')\r\n        else:\r\n            return('spring')\n"}
{"task_id": 160, "generation": "def solution(a, b, n):\r\n    if a == 0 and b == 0:\r\n        return 'No solution'\r\n    elif a == 0:\r\n        return 'x = ', n/b\r\n    elif b == 0:\r\n        return 'y = ', n/a\r\n    else:\r\n        return 'x = ', n/a - b*((n/a)/b)\r\n    return 'x = ', n/a - b*((n/a)/b)\n"}
{"task_id": 161, "generation": "def remove_elements(test_list, test_list2):\r\n  res = list(set(test_list) - set(test_list2))\r\n  return (res)\n"}
{"task_id": 162, "generation": "def sum_series(n):\r\n    sum = 0\r\n    for i in range(n,0,-2):\r\n        sum = sum + i\r\n    return sum\n"}
{"task_id": 163, "generation": "import math\r\ndef area_polygon(n, s):\r\n    return (0.25 * n * s * s) / math.tan(math.pi / n)\n"}
{"task_id": 164, "generation": "def areEquivalent(n,m):\r\n    sum1=0\r\n    sum2=0\r\n    for i in range(1,n):\r\n        if n%i==0:\r\n            sum1+=i\r\n    for i in range(1,m):\r\n        if m%i==0:\r\n            sum2+=i\r\n    if sum1==m and sum2==n:\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 165, "generation": "def count_char_position(test_str):\r\n  result = 0\r\n  for i in range(len(test_str)):\r\n    if test_str[i].isupper():\r\n      result += ord(test_str[i]) - 64\r\n    elif test_str[i].islower():\r\n      result += ord(test_str[i]) - 96\r\n  return result\n"}
{"task_id": 166, "generation": "def find_even_Pair(arr, x):\r\n    count = 0\r\n    for i in range(0, len(arr)):\r\n        for j in range(i + 1, len(arr)):\r\n            if (arr[i] ^ arr[j]) % 2 == 0:\r\n                count += 1\r\n    return count\n"}
{"task_id": 167, "generation": "def next_Power_Of_2(n):\r\n    if n <= 0:\r\n        return 0\r\n    else:\r\n        return 2 ** (n - 1).bit_length()\n"}
{"task_id": 168, "generation": "def frequency(arr, n):\r\n    count = 0\r\n    for i in range(len(arr)):\r\n        if arr[i] == n:\r\n            count += 1\r\n    return count\n"}
{"task_id": 169, "generation": "def get_pell(n):\r\n    if n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 2\r\n    else:\r\n        return get_pell(n-1) + get_pell(n-2)\n"}
{"task_id": 170, "generation": "def sum_range_list(lst, start, end):\r\n    return sum(lst[start:end+1])\n"}
{"task_id": 171, "generation": "def perimeter_pentagon(n):\r\n    return 5*n\n"}
{"task_id": 172, "generation": "def count_occurance(test_str):\r\n  count = 0\r\n  for i in test_str:\r\n    if i =='std':\r\n      count += 1\r\n  return count\n"}
{"task_id": 173, "generation": "def remove_splchar(str):\r\n    result = \"\"\r\n    for i in str:\r\n        if i.isalnum():\r\n            result += i\r\n    return result\n"}
{"task_id": 174, "generation": "def group_keyvalue(test_list):\r\n    result = {}\r\n    for i in test_list:\r\n        if i[0] in result:\r\n            result[i[0]].append(i[1])\r\n        else:\r\n            result[i[0]] = [i[1]]\r\n    return result\n"}
{"task_id": 175, "generation": "def is_valid_parenthese(test_str):\r\n  stack = []\r\n  for i in test_str:\r\n    if i == '(':\r\n      stack.append(i)\r\n    elif i == ')':\r\n      if len(stack) > 0:\r\n        stack.pop()\r\n      else:\r\n        return False\r\n  if len(stack) == 0:\r\n    return True\r\n  else:\r\n    return False\n"}
{"task_id": 176, "generation": "def perimeter_triangle(a,b,c):\r\n    return a+b+c\n"}
{"task_id": 177, "generation": "def answer(a, b):\r\n    lcm = a * b\r\n    for i in range(a, b):\r\n        if lcm % i == 0:\r\n            lcm = lcm * i\r\n            break\r\n    return (lcm // a, lcm // b)\n"}
{"task_id": 178, "generation": "def string_literals(test_list, test_string):\r\n  for i in test_list:\r\n    if i in test_string:\r\n      return 'Matched!'\r\n  return 'Not Matched!'\n"}
{"task_id": 179, "generation": "def is_num_keith(n):\r\n    if n < 10:\r\n        return True\r\n    else:\r\n        sum = 0\r\n        while n > 0:\r\n            sum = sum + n % 10\r\n            n = n // 10\r\n        if is_num_keith(sum):\r\n            return True\r\n        else:\r\n            return False\n"}
{"task_id": 180, "generation": "import math\r\ndef distance_lat_long(lat1, long1, lat2, long2):\r\n    R = 6373.0\r\n    dLat = math.radians(lat2-lat1)\r\n    dLong = math.radians(long2-long1)\r\n    lat1 = math.radians(lat1)\r\n    lat2 = math.radians(lat2)\r\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.sin(dLong/2) * math.sin(dLong/2) * math.cos(lat1) * math.cos(lat2)\r\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\r\n    d = R * c\r\n    return d\n"}
{"task_id": 181, "generation": "def common_prefix(test_list, n):\r\n  res = \"\"\r\n  for i in range(0, n):\r\n    for j in range(0, n-1):\r\n      if test_list[j][i]!= test_list[j+1][i]:\r\n        return res\r\n    res += test_list[0][i]\r\n  return res\n"}
{"task_id": 182, "generation": "import re\r\ndef find_character(test_str):\r\n    upper = []\r\n    lower = []\r\n    special = []\r\n    numeric = []\r\n    for i in test_str:\r\n        if i.isupper():\r\n            upper.append(i)\r\n        elif i.islower():\r\n            lower.append(i)\r\n        elif i.isnumeric():\r\n            numeric.append(i)\r\n        else:\r\n            special.append(i)\r\n    return (upper, lower, special, numeric)\n"}
{"task_id": 183, "generation": "def count_pairs(arr, n, k): \r\n    count = 0\r\n    for i in range(0, n): \r\n        for j in range(i + 1, n): \r\n            if (arr[j] - arr[i] == k or arr[i] - arr[j] == k): \r\n                count += 1\r\n    return count\n"}
{"task_id": 184, "generation": "def greater_specificnum(lst,num):\r\n    for i in lst:\r\n        if i>num:\r\n            return True\r\n    return False\n"}
{"task_id": 185, "generation": "import math\r\ndef parabola_focus(a,b,c):\r\n    x1 = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\r\n    x2 = (-b - math.sqrt(b**2 - 4*a*c))/(2*a)\r\n    return (x1,x2)\n"}
{"task_id": 186, "generation": "import re\r\ndef check_literals(string, literals):\r\n    for literal in literals:\r\n        if re.search(literal, string):\r\n            return 'Matched!'\r\n    return 'Not Matched!'\n"}
{"task_id": 187, "generation": "def longest_common_subsequence(str1, str2, m, n): \r\n    if m == 0 or n == 0: \r\n        return 0\r\n    elif str1[m-1] == str2[n-1]: \r\n        return 1 + longest_common_subsequence(str1, str2, m-1, n-1) \r\n    else: \r\n        return max(longest_common_subsequence(str1, str2, m, n-1), longest_common_subsequence(str1, str2, m-1, n))\n"}
{"task_id": 188, "generation": "import math\r\ndef prod_Square(n):\r\n    if n == 1:\r\n        return False\r\n    else:\r\n        for i in range(2, int(math.sqrt(n)) + 1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\n"}
{"task_id": 189, "generation": "def first_Missing_Positive(arr,n): \r\n    i = 0\r\n    while (i < n): \r\n        if (arr[i] > 0 and arr[i] <= n and arr[i]!= arr[arr[i] - 1]): \r\n            temp = arr[i] \r\n            arr[i] = arr[temp - 1] \r\n            arr[temp - 1] = temp \r\n        else: \r\n            i += 1\r\n    for i in range(0, n): \r\n        if (arr[i]!= i + 1): \r\n            return i + 1\r\n    return n + 1\n"}
{"task_id": 190, "generation": "def count_Intgral_Points(x1,y1,x2,y2):\r\n    if x1 == x2 or y1 == y2:\r\n        return 1\r\n    else:\r\n        return 0\n"}
{"task_id": 191, "generation": "def check_monthnumber(month):\r\n    if month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\r\n        return False\r\n    else:\r\n        return True\n"}
{"task_id": 192, "generation": "def check_String(test_str):\r\n    result = False\r\n    for i in test_str:\r\n        if i.isdigit():\r\n            result = True\r\n        elif i.isalpha():\r\n            result = True\r\n    return result\n"}
{"task_id": 193, "generation": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res)\n"}
{"task_id": 194, "generation": "def octal_To_Decimal(n):\r\n    decimal_value = 0\r\n    base = 1\r\n    temp = n\r\n    while temp:\r\n        last_digit = temp % 10\r\n        temp = int(temp / 10)\r\n        decimal_value += last_digit * base\r\n        base = base * 8\r\n    return decimal_value\n"}
{"task_id": 195, "generation": "def first(arr, n, x): \r\n    for i in range(n): \r\n        if (arr[i] == x): \r\n            return i \r\n    return -1\r\n"}
{"task_id": 196, "generation": "def remove_tuples(test_tup, k):\r\n  res = []\r\n  for i in test_tup:\r\n    if len(i)!= k:\r\n      res.append(i)\r\n  return res\n"}
{"task_id": 197, "generation": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(map(lambda x, y: x**y, test_tup1, test_tup2))\r\n  return res\n"}
{"task_id": 198, "generation": "import math\r\ndef largest_triangle(a,b):\r\n    return (a*b)/math.sqrt(a**2+b**2)\n"}
{"task_id": 199, "generation": "def highest_Power_of_2(n):\r\n    return 2**(n-1).bit_length()\n"}
{"task_id": 200, "generation": "def position_max(lst):\r\n    max_val = max(lst)\r\n    return [i for i, x in enumerate(lst) if x == max_val]\n"}
{"task_id": 201, "generation": "def chkList(test_list):\r\n    return all(x == test_list[0] for x in test_list)\n"}
{"task_id": 202, "generation": "def remove_even(test_str):\r\n  res = \"\"\r\n  for i in range(len(test_str)):\r\n    if i % 2!= 0:\r\n      res = res + test_str[i]\r\n  return res\n"}
{"task_id": 203, "generation": "def hamming_Distance(x, y): \r\n    x = bin(x)[2:] \r\n    y = bin(y)[2:] \r\n    if len(x) > len(y): \r\n        y = y.zfill(len(x)) \r\n    else: \r\n        x = x.zfill(len(y)) \r\n    count = 0\r\n    for i in range(len(x)): \r\n        if x[i]!= y[i]: \r\n            count += 1\r\n    return count\n"}
{"task_id": 204, "generation": "def count(str, char):\r\n    count = 0\r\n    for i in str:\r\n        if i == char:\r\n            count += 1\r\n    return count\n"}
{"task_id": 205, "generation": "def inversion_elements(test_tup):\r\n  res = []\r\n  for i in range(len(test_tup)):\r\n    for j in range(i+1, len(test_tup)):\r\n      if test_tup[i] > test_tup[j]:\r\n        res.append(test_tup[i] - test_tup[j])\r\n  return tuple(res)\n"}
{"task_id": 206, "generation": "def concatenate_elements(test_tup):\r\n  res = tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\r\n  return res\n"}
{"task_id": 207, "generation": "def find_longest_repeating_subseq(string):\r\n    n = len(string)\r\n    tc = [[0 for x in range(n)] for x in range(n)]\r\n    for i in range(n):\r\n        tc[i][i] = 1\r\n    for l in range(2, n+1):\r\n        for i in range(n-l+1):\r\n            j = i+l-1\r\n            if string[i] == string[j] and l == 2:\r\n                tc[i][j] = 2\r\n            elif string[i] == string[j]:\r\n                tc[i][j] = tc[i+1][j-1] + 2\r\n            else:\r\n                tc[i][j] = max(tc[i][j-1], tc[i+1][j])\r\n    return tc[0][n-1]\n"}
{"task_id": 208, "generation": "import re\r\ndef is_decimal(n):\r\n    pattern = r'^[0-9]+\\.[0-9]{2}$'\r\n    if re.match(pattern, n):\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 209, "generation": "def heap_replace(heap, item):\r\n    heap[0] = item\r\n    heapify(heap)\r\n    return heap\n"}
{"task_id": 210, "generation": "import re\r\ndef is_allowed_specific_char(test_str):\r\n  result = re.search(r'^[a-zA-Z0-9]+$', test_str)\r\n  return result\n"}
{"task_id": 211, "generation": "def count_Num(n):\r\n    count = 0\r\n    for i in range(1, n+1):\r\n        if (i & (i >> 1)) == 0:\r\n            count += 1\r\n    return count\n"}
{"task_id": 212, "generation": "def fourth_Power_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i**4\r\n    return sum\n"}
{"task_id": 213, "generation": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(test_tup1[i] + test_tup2[i] for i in range(len(test_tup1)))\r\n  return res\n"}
{"task_id": 214, "generation": "def degree_radian(rad):\r\n    return rad*57.29577951308232\n"}
{"task_id": 215, "generation": "def decode_list(test_list):\r\n  result = []\r\n  for i in range(len(test_list)):\r\n    if type(test_list[i]) == int:\r\n      for j in range(test_list[i]):\r\n        result.append(test_list[i+1])\r\n    else:\r\n      result.append(test_list[i])\r\n  return result\n"}
{"task_id": 216, "generation": "def check_subset_list(test_list1, test_list2):\r\n    result = False\r\n    for i in test_list1:\r\n        if i in test_list2:\r\n            result = True\r\n    return result\n"}
{"task_id": 217, "generation": "def first_Repeated_Char(test_str):\r\n    for i in range(len(test_str)):\r\n        for j in range(i+1, len(test_str)):\r\n            if test_str[i] == test_str[j]:\r\n                return test_str[i]\n"}
{"task_id": 218, "generation": "def min_Operations(n1, n2):\r\n    if n1 == n2:\r\n        return 0\r\n    else:\r\n        if n1 > n2:\r\n            return min_Operations(n1-n2, n2) + 1\r\n        else:\r\n            return min_Operations(n1, n2-n1) + 1\n"}
{"task_id": 219, "generation": "def extract_min_max(test_tup, k):\r\n  res = sorted(test_tup)\r\n  return (res[0:k], res[-k:])\n"}
{"task_id": 220, "generation": "def replace_max_specialchar(string,n):\r\n    string = string.replace(' ',':')\r\n    string = string.replace(',',':')\r\n    string = string.replace('.','')\r\n    string = string.split(':')\r\n    string = string[:n]\r\n    string = ':'.join(string)\r\n    return string\n"}
{"task_id": 221, "generation": "def first_even(test_list):\r\n  for i in test_list:\r\n    if i % 2 == 0:\r\n      return i\n"}
{"task_id": 222, "generation": "def check_type(test_tup):\r\n  result = True\r\n  for i in test_tup:\r\n    if type(i)!= type(test_tup[0]):\r\n      result = False\r\n  return result\n"}
{"task_id": 223, "generation": "def is_majority(arr, n, x):\r\n    count = 0\r\n    for i in range(0, n):\r\n        if (arr[i] == x):\r\n            count = count + 1\r\n    if (count > n / 2):\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 224, "generation": "def count_Set_Bits(n):\r\n    count = 0\r\n    while n:\r\n        count += n & 1\r\n        n >>= 1\r\n    return count\n"}
{"task_id": 225, "generation": "def find_Min(arr, low, high):\r\n    if high < low:\r\n        return arr[0]\r\n    if high == low:\r\n        return arr[low]\r\n    mid = int((low + high)/2)\r\n    if mid < high and arr[mid] > arr[mid + 1]:\r\n        return arr[mid + 1]\r\n    if mid > low and arr[mid] < arr[mid - 1]:\r\n        return arr[mid]\r\n    if arr[low] < arr[mid]:\r\n        return find_Min(arr, mid + 1, high)\r\n    return find_Min(arr, low, mid - 1)\n"}
{"task_id": 226, "generation": "def odd_values_string(test_str):\r\n  res = ''\r\n  for i in range(len(test_str)):\r\n    if i % 2 == 0:\r\n      res += test_str[i]\r\n  return res\n"}
{"task_id": 227, "generation": "def min_of_three(a,b,c):\r\n    if a<b and a<c:\r\n        return a\r\n    elif b<a and b<c:\r\n        return b\r\n    else:\r\n        return c\n"}
{"task_id": 228, "generation": "def all_Bits_Set_In_The_Given_Range(n, start, end):\r\n    if (n & (1 << start)) == 0:\r\n        return False\r\n    if (n & (1 << end)) == 0:\r\n        return False\r\n    return True\n"}
{"task_id": 229, "generation": "def re_arrange_array(arr, n): \r\n    i = 0\r\n    j = n - 1\r\n    while i < j: \r\n        while (arr[i] < 0): \r\n            i += 1\r\n        while (arr[j] >= 0): \r\n            j -= 1\r\n        if (i < j): \r\n            arr[i], arr[j] = arr[j], arr[i] \r\n    return arr\n"}
{"task_id": 230, "generation": "def replace_blank(string,char):\r\n    return string.replace(\" \",\"\"+char+\"\")\n"}
{"task_id": 231, "generation": "def max_sum(triangle, n):\r\n    for i in range(n-2, -1, -1):\r\n        for j in range(i+1):\r\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\r\n    return triangle[0][0]\n"}
{"task_id": 232, "generation": "def larg_nnum(test_list, n):\r\n  return sorted(test_list, reverse=True)[:n]\n"}
{"task_id": 233, "generation": "import math\r\ndef lateralsuface_cylinder(r,h):\r\n    return 2*math.pi*r*h\n"}
{"task_id": 234, "generation": "def volume_cube(n):\r\n    return n*n*n\n"}
{"task_id": 235, "generation": "def even_bit_set_number(n):\r\n    return n | (n+1)\n"}
{"task_id": 236, "generation": "def No_of_Triangle(a,b):\r\n    if a==b:\r\n        return 0\r\n    elif a>b:\r\n        return -1\r\n    else:\r\n        return (a+b-1)*(b-1)//2\n"}
{"task_id": 237, "generation": "def check_occurences(test_tup):\r\n  res = {}\r\n  for i in test_tup:\r\n    if i[0] in res:\r\n      res[i[0]] += 1\r\n    else:\r\n      res[i[0]] = 1\r\n  return res\n"}
{"task_id": 238, "generation": "def number_of_substrings(s):\r\n    return sum(map(lambda x: (x + 1) * x // 2, map(len, s.split(' '))))\n"}
{"task_id": 239, "generation": "```python\ndef get_total_number_of_sequences(n, m):\r\n    if n == 1:\r\n        return 1\r\n    if n == 2:\r\n        return 2\r\n    if n == 3:\r\n        return 4\r\n    if n == 4:\r\n        return 7\r\n    if n == 5:\r\n        return 11\r\n    if n == 6:\r\n        return 16\r\n    if n == 7:\r\n        return 22\r\n    if n == 8:\r\n        return 29\r\n    if n == 9:\r\n        return 37\r\n    if n == 10:\r\n        return 46\r\n    if n == 11:\r\n        return 56\r\n    if n == 12:\r\n        return 67\r\n    if n == 13:\r\n        return 79\r\n    if n == 14:\r\n        return 92\r\n    if n == 15:\r\n        return 106\r\n    if n == 16:\r\n        return 121\r\n    if n == 17:\r\n        return 137\r\n    if n == 18:\r\n        return 154\r\n    if n == 19:\r\n        return 172\r\n    if n == 20:\r\n        return 191\r\n    if n == 21:\r\n        return 211\r\n    if n == 22:\r\n        return 232\r\n    if n == 23:\r\n        return 255\r\n    if n == 24:\r\n        return 279\r\n    if n == 25:\r\n        return 304\r\n    if n == 26:\r\n        return 330\r\n    if n == 27:\r\n        return 357\r\n    if n == 28:\r\n        return 385\r\n    if n == 29:\r\n        return 414\r\n    if n == 30:\r\n        return 444\r\n    if n == 31:\r"}
{"task_id": 240, "generation": "def replace_list(list1, list2):\r\n    list1[-1] = list2\r\n    return list1\n"}
{"task_id": 241, "generation": "def array_3d(m,n,k):\r\n    return [[['*' for x in range(n)] for x in range(m)] for x in range(k)]\n"}
{"task_id": 242, "generation": "def count_charac(test_str):\r\n  return len(test_str)\n"}
{"task_id": 243, "generation": "def sort_on_occurence(test_list):\r\n  return sorted(test_list, key=lambda x: (x[0], x[1]))\n"}
{"task_id": 244, "generation": "import math\r\ndef next_Perfect_Square(n):\r\n    return int(math.sqrt(n))**2\n"}
{"task_id": 245, "generation": "def max_sum(arr, n): \r\n    max_sum = 0\r\n    for i in range(n): \r\n        for j in range(i + 1, n): \r\n            if (arr[i] < arr[j]): \r\n                max_sum = max(max_sum, sum(arr[i:j + 1])) \r\n    return max_sum\n"}
{"task_id": 246, "generation": "def babylonian_squareroot(n):\r\n    x = n\r\n    y = 1\r\n    while x!= y:\r\n        y = (x + y) / 2\r\n        x = n / y\r\n    return y\n"}
{"task_id": 247, "generation": "def lps(s):\r\n    n = len(s)\r\n    t = [[0 for x in range(n)] for x in range(n)]\r\n    for i in range(n):\r\n        t[i][i] = 1\r\n    for l in range(2, n+1):\r\n        for i in range(n-l+1):\r\n            j = i+l-1\r\n            if s[i] == s[j] and l == 2:\r\n                t[i][j] = 2\r\n            elif s[i] == s[j]:\r\n                t[i][j] = t[i+1][j-1] + 2\r\n            else:\r\n                t[i][j] = max(t[i][j-1], t[i+1][j])\r\n    return t[0][n-1]\n"}
{"task_id": 248, "generation": "def harmonic_sum(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return 1/n + harmonic_sum(n-1)\n"}
{"task_id": 249, "generation": "def intersection_array(arr1, arr2):\r\n    return list(filter(lambda x: x in arr2, arr1))\n"}
{"task_id": 250, "generation": "def count_X(test_tup, X):\r\n  return test_tup.count(X)\n"}
{"task_id": 251, "generation": "def insert_element(test_list, element):\r\n  res = []\r\n  for i in test_list:\r\n    res.append(element)\r\n    res.append(i)\r\n  return res\n"}
{"task_id": 252, "generation": "import cmath\r\ndef convert(num):\r\n    return cmath.polar(num)\n"}
{"task_id": 253, "generation": "def count_integer(test_list):\r\n    count = 0\r\n    for i in test_list:\r\n        if type(i) == int:\r\n            count += 1\r\n    return count\n"}
{"task_id": 254, "generation": "def words_ae(test_str):\r\n    result = []\r\n    for i in test_str.split():\r\n        if i[0] in ['a','e']:\r\n            result.append(i)\r\n    return result\n"}
{"task_id": 255, "generation": "def combinations_colors(colours, n):\r\n    if n == 0:\r\n        return [()]\r\n    if n == 1:\r\n        return [(c,) for c in colours]\r\n    return [(c,) + cs for c in colours for cs in combinations_colors(colours, n-1)]\n"}
{"task_id": 256, "generation": "def count_Primes_nums(n):\r\n    count = 0\r\n    for i in range(2, n):\r\n        if is_not_prime(i):\r\n            count += 1\r\n    return count\n"}
{"task_id": 257, "generation": "def swap_numbers(a,b):\r\n    a,b = b,a\r\n    return a,b\n"}
{"task_id": 258, "generation": "def count_odd(lst):\r\n    return len(list(filter(lambda x: x%2!= 0, lst)))\n"}
{"task_id": 259, "generation": "def maximize_elements(test_tup1, test_tup2):\r\n  res = []\r\n  for i in range(len(test_tup1)):\r\n    if test_tup1[i][1] > test_tup2[i][1]:\r\n      res.append(test_tup1[i])\r\n    elif test_tup1[i][1] < test_tup2[i][1]:\r\n      res.append(test_tup2[i])\r\n    else:\r\n      if test_tup1[i][0] > test_tup2[i][0]:\r\n        res.append(test_tup1[i])\r\n      else:\r\n        res.append(test_tup2[i])\r\n  return tuple(res)\n"}
{"task_id": 260, "generation": "def newman_prime(n):\r\n    if n == 1:\r\n        return 2\r\n    elif n == 2:\r\n        return 3\r\n    elif n == 3:\r\n        return 5\r\n    elif n == 4:\r\n        return 17\r\n    elif n == 5:\r\n        return 41\r\n    else:\r\n        return newman_prime(n-1) + newman_prime(n-2) + newman_prime(n-3) + newman_prime(n-4)\n"}
{"task_id": 261, "generation": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\r\n  return (res)\n"}
{"task_id": 262, "generation": "def split_two_parts(test_list, n):\r\n    return (test_list[:n], test_list[n:])\n"}
{"task_id": 263, "generation": "def merge_dict(dict1, dict2):\r\n    dict3 = dict1.copy()\r\n    dict3.update(dict2)\r\n    return dict3\n"}
{"task_id": 264, "generation": "def dog_age(age):\r\n    if age <= 2:\r\n        return age * 10.5\r\n    else:\r\n        return 21 + (age - 2) * 4\n"}
{"task_id": 265, "generation": "def list_split(lst, n):\r\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n"}
{"task_id": 266, "generation": "def lateralsurface_cube(n):\r\n    return 6*n**2\n"}
{"task_id": 267, "generation": "def square_Sum(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        if i%2!= 0:\r\n            sum = sum + i*i\r\n    return sum\n"}
{"task_id": 268, "generation": "def find_star_num(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return 10 * find_star_num(n - 1) + find_star_num(n - 1)\n"}
{"task_id": 269, "generation": "def ascii_value(char):\r\n    return ord(char)\n"}
{"task_id": 270, "generation": "def sum_even_and_even_index(test_list, n):\r\n  sum = 0\r\n  for i in range(0, n):\r\n    if i % 2 == 0:\r\n      sum += test_list[i]\r\n  return sum\n"}
{"task_id": 271, "generation": "def even_Power_Sum(n):\r\n    sum = 0\r\n    for i in range(2,n*2+1,2):\r\n        sum += i**5\r\n    return sum\n"}
{"task_id": 272, "generation": "def rear_extract(test_list):\r\n  res = []\r\n  for i in test_list:\r\n    res.append(i[-1])\r\n  return res\n"}
{"task_id": 273, "generation": "def substract_elements(tup1, tup2):\r\n  res = tuple(map(lambda x, y: x - y, tup1, tup2))\r\n  return res\n"}
{"task_id": 274, "generation": "def even_binomial_Coeff_Sum(n):\r\n    sum = 0\r\n    for i in range(0, n+1):\r\n        if i%2 == 0:\r\n            sum = sum + binomial_Coeff(n, i)\r\n    return sum\n"}
{"task_id": 275, "generation": "def get_Position(arr, n, k):\r\n    for i in range(n):\r\n        if arr[i] == k:\r\n            return i\r\n    return -1\n"}
{"task_id": 276, "generation": "import math\r\ndef volume_cylinder(r,h):\r\n    return math.pi*r*r*h\n"}
{"task_id": 277, "generation": "def dict_filter(dict_obj, value):\r\n    return {k: v for k, v in dict_obj.items() if v > value}\n"}
{"task_id": 278, "generation": "def count_first_elements(test_tup):\r\n  res = []\r\n  for i in test_tup:\r\n    if type(i) == tuple:\r\n      res.append(i)\r\n  return len(res)\n"}
{"task_id": 279, "generation": "def is_num_decagonal(n):\r\n    return (n*(3*n-1))//2\n"}
{"task_id": 280, "generation": "def sequential_search(arr, x): \r\n    for i in range(len(arr)): \r\n        if arr[i] == x: \r\n            return (True, i) \r\n    return (False, -1)\n"}
{"task_id": 281, "generation": "def all_unique(test_list):\r\n  return len(test_list) == len(set(test_list))\n"}
{"task_id": 282, "generation": "def sub_list(l1,l2):\r\n    return list(map(lambda x,y:x-y,l1,l2))\n"}
{"task_id": 283, "generation": "def validate(n):\r\n    s = str(n)\r\n    for i in range(0,10):\r\n        if s.count(str(i)) <= i:\r\n            return False\r\n    return True\n"}
{"task_id": 284, "generation": "def check_element(test_list, test_string):\r\n  result = True\r\n  for i in test_list:\r\n    if i!= test_string:\r\n      result = False\r\n  return result\n"}
{"task_id": 285, "generation": "def text_match_two_three(test_str):\r\n  if test_str.startswith('ab') and test_str.endswith('bbb'):\r\n    return 'Found a match!'\r\n  else:\r\n    return 'Not matched!'\n"}
{"task_id": 286, "generation": "def max_sub_array_sum_repeated(arr, n, k): \r\n    sum = 0\r\n    for i in range(0, k): \r\n        sum += max_sub_array(arr, n) \r\n    return sum\r\ndef max_sub_array(arr, n): \r\n    max_so_far = arr[0] \r\n    max_ending_here = arr[0] \r\n    for i in range(1, n): \r\n        max_ending_here = max(arr[i], max_ending_here + arr[i]) \r\n        max_so_far = max(max_so_far, max_ending_here) \r\n    return max_so_far\n"}
{"task_id": 287, "generation": "def square_Sum(n):\r\n    return (n*(n+1)*(2*n+1))//6\n"}
{"task_id": 288, "generation": "def modular_inverse(arr, p, q):\r\n    result = 0\r\n    for i in range(1, q):\r\n        if (p * i) % q == 1:\r\n            result += 1\r\n    return result\n"}
{"task_id": 289, "generation": "def odd_Days(year):\r\n    if year % 4 == 0:\r\n        if year % 100 == 0:\r\n            if year % 400 == 0:\r\n                return 366\r\n            else:\r\n                return 365\r\n        else:\r\n            return 366\r\n    else:\r\n        return 365\n"}
{"task_id": 290, "generation": "def max_length(test_list):\r\n    max_length = 0\r\n    max_list = []\r\n    for i in test_list:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n            max_list = i\r\n    return (max_length, max_list)\n"}
{"task_id": 291, "generation": "def count_no_of_ways(n, k):\r\n    if n == 1:\r\n        return k\r\n    if n == 2:\r\n        return k * (k - 1)\r\n    if n > 2:\r\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k) * (k - 1)\n"}
{"task_id": 292, "generation": "def find(n,d):\r\n    return n//d\n"}
{"task_id": 293, "generation": "import math\r\ndef otherside_rightangle(a,b):\r\n    return math.sqrt(a**2+b**2)\n"}
{"task_id": 294, "generation": "def max_val(test_list):\r\n  max_val = test_list[0]\r\n  for i in test_list:\r\n    if type(i) == int:\r\n      if i > max_val:\r\n        max_val = i\r\n    elif type(i) == str:\r\n      if len(i) > len(max_val):\r\n        max_val = i\r\n  return max_val\n"}
{"task_id": 295, "generation": "def sum_div(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        if n%i==0:\r\n            sum+=i\r\n    return sum\n"}
{"task_id": 296, "generation": "def get_Inv_Count(arr,n):\r\n    count = 0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i] > arr[j]:\r\n                count += 1\r\n    return count\n"}
{"task_id": 297, "generation": "def flatten_list(lst):\r\n    result = []\r\n    for i in lst:\r\n        if type(i) == list:\r\n            result.extend(flatten_list(i))\r\n        else:\r\n            result.append(i)\r\n    return result\n"}
{"task_id": 298, "generation": "def intersection_nested_lists(test_list1, test_list2):\r\n  res = []\r\n  for i in test_list1:\r\n    if i in test_list2:\r\n      res.append(i)\r\n  return res\n"}
{"task_id": 299, "generation": "def max_aggregate(test_list):\r\n    max_value = 0\r\n    max_key = ''\r\n    for key, value in test_list:\r\n        if value > max_value:\r\n            max_value = value\r\n            max_key = key\r\n    return (max_key, max_value)\n"}
{"task_id": 300, "generation": "def count_binary_seq(n):\r\n    if n == 0:\r\n        return 1\r\n    if n == 1:\r\n        return 2\r\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n"}
{"task_id": 301, "generation": "def dict_depth(d):\r\n    if not isinstance(d, dict):\r\n        return 0\r\n    else:\r\n        return 1 + max(dict_depth(v) for v in d.values())\n"}
{"task_id": 302, "generation": "def set_Bit_Number(n):\r\n    return n | (n - 1)\r\n"}
{"task_id": 303, "generation": "def solve(arr, n):\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] > arr[j]:\r\n                count += 1\r\n    if count % 2 == 0:\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 304, "generation": "def find_Element(arr, rotations, n, k):\r\n    for i in range(n):\r\n        arr[i] = arr[i] + (rotations[i][0] * k)\r\n    for i in range(n):\r\n        arr[i] = arr[i] + (rotations[i][1] * k)\r\n    return arr[k]\n"}
{"task_id": 305, "generation": "def start_withp(lst):\r\n    result = []\r\n    for i in lst:\r\n        if i.startswith('p') or i.startswith('P'):\r\n            result.append(i)\r\n    return tuple(result)\n"}
{"task_id": 306, "generation": "def max_sum_increasing_subseq(arr, n, k, i):\r\n    if i == n:\r\n        return 0\r\n    if k > i:\r\n        return max_sum_increasing_subseq(arr, n, k, i + 1)\r\n    else:\r\n        return max(max_sum_increasing_subseq(arr, n, k, i + 1), max_sum_increasing_subseq(arr, n, k, i + 1) + arr[i])\n"}
{"task_id": 307, "generation": "def colon_tuplex(test_tup, index, value):\r\n  return test_tup[:index] + (value,) + test_tup[index:]\n"}
{"task_id": 308, "generation": "def large_product(test_list1, test_list2, n):\r\n  res = []\r\n  for i in range(n):\r\n    res.append(max(test_list1[i], test_list2[i]))\r\n  return res\n"}
{"task_id": 309, "generation": "def maximum(a, b):\r\n    if a > b:\r\n        return a\r\n    else:\r\n        return b\n"}
{"task_id": 310, "generation": "def string_to_tuple(test_str):\r\n  return tuple(test_str)\n"}
{"task_id": 311, "generation": "def set_left_most_unset_bit(n):\r\n    return n | (n - 1)\n"}
{"task_id": 312, "generation": "import math\r\ndef volume_cone(r,h):\r\n    return (1/3)*math.pi*r*r*h\n"}
{"task_id": 313, "generation": "def pos_nos(lst):\r\n    return [i for i in lst if i > 0]\n"}
{"task_id": 314, "generation": "```python\ndef max_sum_rectangular_grid(grid, n):\r\n    if n == 1:\r\n        return max(grid[0])\r\n    if n == 2:\r\n        return max(grid[0]) + max(grid[1])\r\n    if n == 3:\r\n        return max(grid[0]) + max(grid[1]) + max(grid[2])\r\n    if n == 4:\r\n        return max(grid[0]) + max(grid[1]) + max(grid[2]) + max(grid[3])\r\n    if n == 5:\r\n        return max(grid[0]) + max(grid[1]) + max(grid[2]) + max(grid[3]) + max(grid[4])\r\n    if n == 6:\r\n        return max(grid[0]) + max(grid[1]) + max(grid[2]) + max(grid[3]) + max(grid[4]) + max(grid[5])\r\n    if n == 7:\r\n        return max(grid[0]) + max(grid[1]) + max(grid[2]) + max(grid[3]) + max(grid[4]) + max(grid[5]) + max(grid[6])\r\n    if n == 8:\r\n        return max(grid[0]) + max(grid[1]) + max(grid[2]) + max(grid[3]) + max(grid[4]) + max(grid[5]) + max(grid[6]) + max(grid[7])\r\n    if n == 9:\r\n        return max(grid[0]) + max(grid[1]) + max(grid[2]) + max(grid[3]) + max(grid[4]) + max(grid[5]) + max(grid[6]) + max(grid[7]) + max(grid[8])\r\n    if n == 10:\r\n        return max(grid[0]) + max(grid[1]) + max(grid[2]) + max(grid[3]) + max(grid[4]) + max(grid[5]) + max(grid[6]) + max(grid[7]) + max(grid[8]) + max(grid[9"}
{"task_id": 315, "generation": "def find_Max_Len_Even(test_str):\r\n    max_len = -1\r\n    max_str = \"\"\r\n    for i in test_str.split():\r\n        if len(i) % 2 == 0 and len(i) > max_len:\r\n            max_len = len(i)\r\n            max_str = i\r\n    return max_str\n"}
{"task_id": 316, "generation": "def find_last_occurrence(arr, x):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\r\n                return mid\r\n            else:\r\n                low = mid + 1\r\n    return -1\n"}
{"task_id": 317, "generation": "def modified_encode(test_list):\r\n    result = []\r\n    count = 1\r\n    for i in range(len(test_list)-1):\r\n        if test_list[i] == test_list[i+1]:\r\n            count += 1\r\n        else:\r\n            result.append(count)\r\n            result.append(test_list[i])\r\n            count = 1\r\n    result.append(count)\r\n    result.append(test_list[len(test_list)-1])\r\n    return result\n"}
{"task_id": 318, "generation": "def max_volume(n):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return max_volume(n-1) + max_volume(n-2) + max_volume(n-3)\n"}
{"task_id": 319, "generation": "import re\r\ndef find_long_word(test_str):\r\n  res = re.findall(r'\\b\\w{5}\\b', test_str)\r\n  return res\n"}
{"task_id": 320, "generation": "def sum_difference(n):\r\n    sum_of_squares = 0\r\n    sum_of_numbers = 0\r\n    for i in range(1, n+1):\r\n        sum_of_squares += i**2\r\n        sum_of_numbers += i\r\n    return sum_of_squares - sum_of_numbers**2\n"}
{"task_id": 321, "generation": "def find_demlo(n):\r\n    n = str(n)\r\n    n = n[::-1]\r\n    n = n.replace('1', '12')\r\n    n = n.replace('2', '13')\r\n    n = n.replace('3', '14')\r\n    n = n.replace('4', '15')\r\n    n = n.replace('5', '16')\r\n    n = n.replace('6', '17')\r\n    n = n.replace('7', '18')\r\n    n = n.replace('8', '19')\r\n    n = n.replace('9', '20')\r\n    n = n.replace('0', '21')\r\n    n = n.replace('12', '1')\r\n    n = n.replace('13', '2')\r\n    n = n.replace('14', '3')\r\n    n = n.replace('15', '4')\r\n    n = n.replace('16', '5')\r\n    n = n.replace('17', '6')\r\n    n = n.replace('18', '7')\r\n    n = n.replace('19', '8')\r\n    n = n.replace('20', '9')\r\n    n = n.replace('21', '0')\r\n    n = n[::-1]\r\n    return n\n"}
{"task_id": 322, "generation": "def position_min(test_list):\r\n  res = []\r\n  for i in range(len(test_list)):\r\n    if test_list[i] == min(test_list):\r\n      res.append(i)\r\n  return res\n"}
{"task_id": 323, "generation": "def re_arrange(arr, n): \r\n    i = 0\r\n    j = n - 1\r\n    while (i < j): \r\n        while (i < n and arr[i] < 0): \r\n            i += 1\r\n        while (j >= 0 and arr[j] > 0): \r\n            j -= 1\r\n        if (i < j): \r\n            arr[i], arr[j] = arr[j], arr[i] \r\n    return arr\n"}
{"task_id": 324, "generation": "def sum_of_alternates(test_tup):\r\n  res = tuple(sum(i) for i in zip(*[iter(test_tup)]*2))\r\n  return (res)\n"}
{"task_id": 325, "generation": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n\r\n    res = n\r\n    for i in range(1, n + 1):\r\n        temp = i * i\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res, 1 + get_Min_Squares(n - temp))\r\n    return res\n"}
{"task_id": 326, "generation": "def most_occurrences(test_list):\r\n  res = max(test_list, key=test_list.count)\r\n  return res\n"}
{"task_id": 327, "generation": "def check_isosceles(a, b, c):\r\n    if a == b or b == c or a == c:\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 328, "generation": "def rotate_left(lst, n, d):\r\n    return lst[d:] + lst[:d]\n"}
{"task_id": 329, "generation": "def neg_count(test_list):\r\n  count = 0\r\n  for i in test_list:\r\n    if i < 0:\r\n      count += 1\r\n  return count\n"}
{"task_id": 330, "generation": "import re\r\ndef find_char(test_str):\r\n  result = re.findall(r'\\b\\w{3,5}\\b', test_str)\r\n  return result\n"}
{"task_id": 331, "generation": "def count_unset_bits(n):\r\n    count = 0\r\n    while n:\r\n        count += n & 1\r\n        n >>= 1\r\n    return count\n"}
{"task_id": 332, "generation": "def char_frequency(string):\r\n    dict = {}\r\n    for n in string:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict\n"}
{"task_id": 333, "generation": "def Sort(lst):\r\n    return sorted(lst, key=lambda x: x[1])\n"}
{"task_id": 334, "generation": "def check_Validity(a,b,c):\r\n    if a+b>c and b+c>a and c+a>b:\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 335, "generation": "def ap_sum(a,d,n):\r\n    return (n/2)*(2*a+(n-1)*d)\n"}
{"task_id": 336, "generation": "def check_monthnum(month):\r\n    if month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 337, "generation": "def text_match_word(text):\r\n    if text.endswith(\".\"):\r\n        return \"Found a match!\"\r\n    else:\r\n        return \"Not matched!\"\n"}
{"task_id": 338, "generation": "def count_Substring_With_Equal_Ends(s):\r\n    count = 0\r\n    for i in range(len(s)):\r\n        for j in range(i+1,len(s)+1):\r\n            if s[i] == s[j-1]:\r\n                count += 1\r\n    return count\n"}
{"task_id": 339, "generation": "```python\ndef find_Divisor(a,b):\r\n    max_divisor = 0\r\n    for i in range(a,b+1):\r\n        if i%2 == 0:\r\n            if i%3 == 0:\r\n                if i%4 == 0:\r\n                    if i%5 == 0:\r\n                        if i%6 == 0:\r\n                            if i%7 == 0:\r\n                                if i%8 == 0:\r\n                                    if i%9 == 0:\r\n                                        if i%10 == 0:\r\n                                            if i%11 == 0:\r\n                                                if i%12 == 0:\r\n                                                    if i%13 == 0:\r\n                                                        if i%14 == 0:\r\n                                                            if i%15 == 0:\r\n                                                                if i%16 == 0:\r\n                                                                    if i%17 == 0:\r\n                                                                        if i%18 == 0:\r\n                                                                            if i%19 == 0:\r\n                                                                                if i%20 == 0:\r\n                                                                                    if i%21 == 0:\r\n                                                                                        if i%22 == 0:\r\n                                                                                            if i%23 == 0:\r\n                                                                                                if i%24 == 0:\r\n                                                                                                    if i%25 == 0:\r\n                                                                                                        if i%26 == 0:\r\n                                                                                                            if i%27 == 0:\r\n                                                                                                                if i%28 == 0:\r\n                                                                                                                    if i%29 == 0:\r\n                                                                                                                        if i%30 == 0:\r\n                                                                                                                            if i%31 == 0:\r\n                                                                                                                                if i%32 == 0:\r\n                                                                                                                                    if i%33 == 0:\r\n                                                                                                                                        if i%34 == 0:\r\n                                                                                                                                            if i%35 == 0:\r\n                                                                                                                                                if i%36 == 0:\r\n                                                                                                                                                    if i%37 == 0:\r\n                                                                                                                                                        if i%38 == 0:\r\n                                                                                                                                                            if i%39 == 0:\r\n                                                                                                                                                                if i%40 == 0:\r\n                                                                                                                                                                    if i%41 == 0:\r\n"}
{"task_id": 340, "generation": "def sum_three_smallest_nums(test_list):\r\n  test_list.sort()\r\n  return sum(test_list[:3])\n"}
{"task_id": 341, "generation": "def set_to_tuple(test_set):\r\n  return tuple(test_set)\n"}
{"task_id": 342, "generation": "def find_minimum_range(arr):\r\n    min_range = [arr[0][0], arr[0][-1]]\r\n    for i in range(len(arr)):\r\n        for j in range(len(arr[i])):\r\n            if arr[i][j] < min_range[0]:\r\n                min_range[0] = arr[i][j]\r\n            if arr[i][j] > min_range[1]:\r\n                min_range[1] = arr[i][j]\r\n    return min_range\n"}
{"task_id": 343, "generation": "def dig_let(s):\r\n    digits = 0\r\n    letters = 0\r\n    for i in s:\r\n        if i.isdigit():\r\n            digits += 1\r\n        elif i.isalpha():\r\n            letters += 1\r\n    return (digits, letters)\n"}
{"task_id": 344, "generation": "def count_Odd_Squares(start, end):\r\n    count = 0\r\n    for i in range(start, end + 1):\r\n        if i % 2!= 0:\r\n            count += 1\r\n    return count\n"}
{"task_id": 345, "generation": "def diff_consecutivenums(test_list):\r\n  res = []\r\n  for i in range(len(test_list)-1):\r\n    res.append(test_list[i+1]-test_list[i])\r\n  return res\n"}
{"task_id": 346, "generation": "def zigzag(n, k):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return (k * zigzag(n-1, k) + (k-1))\n"}
{"task_id": 347, "generation": "def count_Squares(m,n):\r\n    return (m*n) - (m+n-1)\n"}
{"task_id": 348, "generation": "def find_ways(n):\r\n    if n == 1:\r\n        return 1\r\n    if n == 2:\r\n        return 2\r\n    if n == 3:\r\n        return 4\r\n    return find_ways(n-1) + find_ways(n-2) + find_ways(n-3)\n"}
{"task_id": 349, "generation": "def check(s):\r\n    if s.isdigit():\r\n        if int(s) == 0:\r\n            return \"No\"\r\n        else:\r\n            return \"Yes\"\r\n    else:\r\n        return \"No\"\n"}
{"task_id": 350, "generation": "def minimum_Length(test_string):\r\n  res = []\r\n  for i in test_string:\r\n    if test_string.count(i) == 1:\r\n      res.append(i)\r\n  return len(res)\n"}
{"task_id": 351, "generation": "def first_Element(arr, n, k):\r\n    for i in range(0, n):\r\n        count = 1\r\n        for j in range(i + 1, n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n                if count == k:\r\n                    return arr[i]\n"}
{"task_id": 352, "generation": "def unique_Characters(test_string):\r\n  result = True\r\n  for i in range(len(test_string)):\r\n    for j in range(i+1, len(test_string)):\r\n      if test_string[i] == test_string[j]:\r\n        result = False\r\n  return result\n"}
{"task_id": 353, "generation": "def remove_column(lst, col):\r\n    return [row[:col] + row[col+1:] for row in lst]\n"}
{"task_id": 354, "generation": "def tn_ap(a,d,n):\r\n    return a+(n-1)*d\n"}
{"task_id": 355, "generation": "import math\r\ndef count_Rectangles(r):\r\n    return int(math.pi * r * r)\n"}
{"task_id": 356, "generation": "def find_angle(a,b):\r\n    c = 180 - a - b\r\n    return c\n"}
{"task_id": 357, "generation": "def find_max(test_tup):\r\n    max_val = test_tup[0][1]\r\n    for i in range(1, len(test_tup)):\r\n        if test_tup[i][1] > max_val:\r\n            max_val = test_tup[i][1]\r\n    return max_val\n"}
{"task_id": 358, "generation": "def moddiv_list(lst1, lst2):\r\n    return list(map(lambda x, y: x % y, lst1, lst2))\n"}
{"task_id": 359, "generation": "import math\r\ndef Check_Solution(a,b,c):\r\n    if a == 0:\r\n        return \"No\"\r\n    else:\r\n        d = b*b - 4*a*c\r\n        if d < 0:\r\n            return \"No\"\r\n        else:\r\n            if d == 0:\r\n                return \"Yes\"\r\n            else:\r\n                return \"Yes\"\n"}
{"task_id": 360, "generation": "def get_carol(n):\r\n    if n == 1:\r\n        return 7\r\n    elif n == 2:\r\n        return 223\r\n    elif n == 3:\r\n        return 959\r\n    else:\r\n        return get_carol(n-1) + get_carol(n-2) + get_carol(n-3)\n"}
{"task_id": 361, "generation": "def remove_empty(test_list):\r\n  res = [i for i in test_list if i]\r\n  return res\n"}
{"task_id": 362, "generation": "def max_occurrences(test_list):\r\n  max_count = 0\r\n  max_item = None\r\n  for item in test_list:\r\n    count = test_list.count(item)\r\n    if count > max_count:\r\n      max_count = count\r\n      max_item = item\r\n  return max_item\n"}
{"task_id": 363, "generation": "def add_K_element(test_tup, k):\r\n  res = tuple(map(lambda x: tuple(map(lambda y: y+k, x)), test_tup))\r\n  return res\n"}
{"task_id": 364, "generation": "def min_flip_to_make_string_alternate(test_str):\r\n  count = 0\r\n  for i in range(len(test_str)):\r\n    if test_str[i] == '0':\r\n      count += 1\r\n  return count\n"}
{"task_id": 365, "generation": "def count_Digit(n):\r\n    return len(str(n))\n"}
{"task_id": 366, "generation": "def adjacent_num_product(test_list):\r\n  result = 0\r\n  for i in range(len(test_list)-1):\r\n    if test_list[i]*test_list[i+1] > result:\r\n      result = test_list[i]*test_list[i+1]\r\n  return result\n"}
{"task_id": 367, "generation": "class Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.left = None\r\n        self.right = None\r\n\r\ndef is_tree_balanced(root):\r\n    if root is None:\r\n        return True\r\n    else:\r\n        left_height = height(root.left)\r\n        right_height = height(root.right)\r\n        if abs(left_height - right_height) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right):\r\n            return True\r\n        else:\r\n            return False\r\n\r\ndef height(root):\r\n    if root is None:\r\n        return 0\r\n    else:\r\n        return 1 + max(height(root.left), height(root.right))\n"}
{"task_id": 368, "generation": "def repeat_tuples(tup, n):\r\n    return tuple(tup for i in range(n))\n"}
{"task_id": 369, "generation": "def lateralsurface_cuboid(a,b,c):\r\n    return 2*(a*b+b*c+c*a)\n"}
{"task_id": 370, "generation": "def float_sort(tup):\r\n    return sorted(tup, key=lambda x: float(x[1]))\n"}
{"task_id": 371, "generation": "def smallest_missing(arr, low, high):\r\n    if low > high:\r\n        return high + 1\r\n    if low == high:\r\n        return high + 1\r\n    mid = (low + high) // 2\r\n    if arr[mid] > mid:\r\n        return smallest_missing(arr, low, mid - 1)\r\n    else:\r\n        return smallest_missing(arr, mid + 1, high)\n"}
{"task_id": 372, "generation": "import heapq\r\ndef heap_assending(lst):\r\n    heapq.heapify(lst)\r\n    return list(heapq.nlargest(len(lst), lst))\n"}
{"task_id": 373, "generation": "def volume_cuboid(a,b,c):\r\n    return a*b*c\n"}
{"task_id": 374, "generation": "def permute_string(s):\r\n    if len(s) == 1:\r\n        return [s]\r\n    else:\r\n        l = []\r\n        for i in range(len(s)):\r\n            m = s[i]\r\n            rem = s[:i] + s[i+1:]\r\n            for j in permute_string(rem):\r\n                l.append(m+j)\r\n        return l\n"}
{"task_id": 375, "generation": "def round_num(num,multiple):\r\n    return (num + (multiple - (num % multiple)))\n"}
{"task_id": 376, "generation": "def remove_replica(test_tup):\r\n  res = []\r\n  for i in test_tup:\r\n    if i not in res:\r\n      res.append(i)\r\n    else:\r\n      res.append('MSP')\r\n  return tuple(res)\n"}
{"task_id": 377, "generation": "def remove_Char(test_str, test_char):\r\n  result = \"\"\r\n  for i in test_str:\r\n    if i!= test_char:\r\n      result += i\r\n  return result\n"}
{"task_id": 378, "generation": "def move_first(test_list):\r\n  return test_list[1:] + test_list[:1]\n"}
{"task_id": 379, "generation": "def surfacearea_cuboid(l,b,h):\r\n  return 2*(l*b+b*h+h*l)\n"}
{"task_id": 380, "generation": "def multi_list(m, n):\r\n    result = []\r\n    for i in range(m):\r\n        result.append([])\r\n        for j in range(n):\r\n            result[i].append(0)\r\n    return result\n"}
{"task_id": 381, "generation": "def index_on_inner_list(test_list, index):\r\n    return sorted(test_list, key=lambda x: x[index])\n"}
{"task_id": 382, "generation": "def find_rotation_count(arr):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    while low <= high:\r\n        if arr[low] <= arr[high]:\r\n            return low\r\n        mid = (low + high) // 2\r\n        next = (mid + 1) % len(arr)\r\n        prev = (mid - 1 + len(arr)) % len(arr)\r\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev]:\r\n            return mid\r\n        elif arr[mid] <= arr[high]:\r\n            high = mid - 1\r\n        else:\r\n            low = mid + 1\r\n    return -1\n"}
{"task_id": 383, "generation": "def even_bit_toggle_number(n):\r\n    return n ^ 0xAAAAAAAA\r\n"}
{"task_id": 384, "generation": "def frequency_Of_Smallest(n,arr):\r\n    min_val = min(arr)\r\n    count = 0\r\n    for i in range(len(arr)):\r\n        if arr[i] == min_val:\r\n            count += 1\r\n    return count\n"}
{"task_id": 385, "generation": "def get_perrin(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return (n * get_perrin(n-1))\n"}
{"task_id": 386, "generation": "def swap_count(s):\r\n    count = 0\r\n    for i in range(len(s)):\r\n        if s[i] == '[':\r\n            count += 1\r\n        elif s[i] == ']':\r\n            count -= 1\r\n    return count\n"}
{"task_id": 387, "generation": "def even_or_odd(hex_num):\r\n    if len(hex_num) % 2 == 0:\r\n        return \"Even\"\r\n    else:\r\n        return \"Odd\"\n"}
{"task_id": 388, "generation": "def highest_Power_of_2(n):\r\n    return 2**(n.bit_length())\n"}
{"task_id": 389, "generation": "def find_lucas(n):\r\n    if n == 0:\r\n        return 2\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return find_lucas(n-1) + find_lucas(n-2)\n"}
{"task_id": 390, "generation": "def add_string(test_list, test_string):\r\n  result = []\r\n  for i in test_list:\r\n    result.append(test_string.format(i))\r\n  return result\n"}
{"task_id": 391, "generation": "def convert_list_dictionary(list1, list2, list3):\r\n    res = []\r\n    for i in range(len(list1)):\r\n        res.append({list1[i]:{list2[i]:list3[i]}})\r\n    return res\n"}
{"task_id": 392, "generation": "def get_max_sum(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"}
{"task_id": 393, "generation": "def max_length_list(test_list):\r\n    max_length = len(max(test_list, key=len))\r\n    return (max_length, max(test_list, key=len))\n"}
{"task_id": 394, "generation": "def check_distinct(test_tup):\r\n  return len(test_tup) == len(set(test_tup))\n"}
{"task_id": 395, "generation": "def first_non_repeating_character(test_str):\r\n  for i in test_str:\r\n    if test_str.count(i) == 1:\r\n      return i\n"}
{"task_id": 396, "generation": "import re\r\ndef check_char(test_str):\r\n  if re.search(r\"^[a-zA-Z]$\", test_str) and re.search(r\"[a-zA-Z]$\", test_str):\r\n    return \"Valid\"\r\n  else:\r\n    return \"Invalid\"\n"}
{"task_id": 397, "generation": "def median_numbers(a, b, c):\r\n    if a > b:\r\n        if a > c:\r\n            if b > c:\r\n                return b\r\n            else:\r\n                return c\r\n        else:\r\n            return a\r\n    else:\r\n        if b > c:\r\n            if a > c:\r\n                return a\r\n            else:\r\n                return c\r\n        else:\r\n            return b\n"}
{"task_id": 398, "generation": "def sum_of_digits(test_list):\r\n  sum = 0\r\n  for i in test_list:\r\n    if type(i) == int:\r\n      sum = sum + i\r\n    elif type(i) == list:\r\n      sum = sum + sum_of_digits(i)\r\n  return sum\n"}
{"task_id": 399, "generation": "def bitwise_xor(tup1, tup2):\r\n    return tuple(map(lambda x, y: x ^ y, tup1, tup2))\n"}
{"task_id": 400, "generation": "def extract_freq(test_list):\r\n  res = {}\r\n  for i in test_list:\r\n    if i in res:\r\n      res[i] += 1\r\n    else:\r\n      res[i] = 1\r\n  return len(res)\n"}
{"task_id": 401, "generation": "def add_nested_tuples(tup1, tup2):\r\n    return tuple(map(lambda x, y: (x[0] + y[0], x[1] + y[1]), tup1, tup2))\n"}
{"task_id": 402, "generation": "```python\ndef ncr_modp(n, r, p):\r\n    if r == 0:\r\n        return 1\r\n    if r > n:\r\n        return 0\r\n    if r == n:\r\n        return 1\r\n    if r == 1:\r\n        return n\r\n    if r == n-1:\r\n        return 1\r\n    if r == n-2:\r\n        return n-1\r\n    if r == n-3:\r\n        return n-2\r\n    if r == n-4:\r\n        return n-3\r\n    if r == n-5:\r\n        return n-4\r\n    if r == n-6:\r\n        return n-5\r\n    if r == n-7:\r\n        return n-6\r\n    if r == n-8:\r\n        return n-7\r\n    if r == n-9:\r\n        return n-8\r\n    if r == n-10:\r\n        return n-9\r\n    if r == n-11:\r\n        return n-10\r\n    if r == n-12:\r\n        return n-11\r\n    if r == n-13:\r\n        return n-12\r\n    if r == n-14:\r\n        return n-13\r\n    if r == n-15:\r\n        return n-14\r\n    if r == n-16:\r\n        return n-15\r\n    if r == n-17:\r\n        return n-16\r\n    if r == n-18:\r\n        return n-17\r\n    if r == n-19:\r\n        return n-18\r\n    if r == n-20:\r\n        return n-19\r\n    if r == n-21:\r\n        return n-20\r\n    if r == n-22:\r\n        return n-21\r\n    if r == n-23:\r\n        return n-22\r\n    if r == n-24:\r\n        return n-23\r\n    if r"}
{"task_id": 403, "generation": "import re\r\ndef is_valid_URL(url):\r\n    regex = r\"^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$\"\r\n    if re.match(regex, url):\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 404, "generation": "def minimum(a, b):\r\n    if a < b:\r\n        return a\r\n    else:\r\n        return b\n"}
{"task_id": 405, "generation": "def check_tuplex(test_tup, test_ele):\r\n    result = False\r\n    for element in test_tup:\r\n        if element == test_ele:\r\n            result = True\r\n    return result\n"}
{"task_id": 406, "generation": "def find_Parity(n):\r\n    if n % 2 == 0:\r\n        return \"Even Parity\"\r\n    else:\r\n        return \"Odd Parity\"\n"}
{"task_id": 407, "generation": "def rearrange_bigger(n):\r\n    n = str(n)\r\n    n = list(n)\r\n    for i in range(len(n)-1,0,-1):\r\n        if n[i] > n[i-1]:\r\n            break\r\n    else:\r\n        return False\r\n    for j in range(len(n)-1,0,-1):\r\n        if n[j] > n[i-1]:\r\n            n[i-1],n[j] = n[j],n[i-1]\r\n            break\r\n    n[i:] = n[i:][::-1]\r\n    return int(''.join(n))\n"}
{"task_id": 408, "generation": "def k_smallest_pairs(arr1, arr2, k):\r\n    arr1.sort()\r\n    arr2.sort()\r\n    result = []\r\n    i = 0\r\n    j = 0\r\n    while i < len(arr1) and j < len(arr2) and len(result) < k:\r\n        result.append([arr1[i], arr2[j]])\r\n        i += 1\r\n        j += 1\r\n    return result\n"}
{"task_id": 409, "generation": "def min_product_tuple(test_tup):\r\n  res = test_tup[0][0]*test_tup[0][1]\r\n  for i in range(1,len(test_tup)):\r\n    if res > test_tup[i][0]*test_tup[i][1]:\r\n      res = test_tup[i][0]*test_tup[i][1]\r\n  return res\n"}
{"task_id": 410, "generation": "def min_val(test_list):\r\n    min_val = test_list[0]\r\n    for i in test_list:\r\n        if type(i) == int:\r\n            if i < min_val:\r\n                min_val = i\r\n        elif type(i) == str:\r\n            if len(i) < len(min_val):\r\n                min_val = i\r\n    return min_val\n"}
{"task_id": 411, "generation": "import re\r\ndef snake_to_camel(s):\r\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), s)\n"}
{"task_id": 412, "generation": "def remove_odd(test_list):\r\n  res = []\r\n  for i in test_list:\r\n    if i%2 == 0:\r\n      res.append(i)\r\n  return res\n"}
{"task_id": 413, "generation": "def extract_nth_element(test_list, n):\r\n    return [test_list[i][n] for i in range(len(test_list))]\n"}
{"task_id": 414, "generation": "def overlapping(test_list1, test_list2):\r\n  result = False\r\n  for i in test_list1:\r\n    if i in test_list2:\r\n      result = True\r\n  return result\n"}
{"task_id": 415, "generation": "def max_Product(arr):\r\n    max1 = max2 = -1\r\n    for i in range(len(arr)):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i]*arr[j] > max1:\r\n                max1 = arr[i]*arr[j]\r\n                max2 = arr[i]\r\n    return (max2,max1)\n"}
{"task_id": 416, "generation": "```python\ndef breakSum(n):\r\n    if n == 0:\r\n        return 0\r\n    if n == 1:\r\n        return 1\r\n    if n == 2:\r\n        return 2\r\n    if n == 3:\r\n        return 3\r\n    if n == 4:\r\n        return 4\r\n    if n == 5:\r\n        return 5\r\n    if n == 6:\r\n        return 6\r\n    if n == 7:\r\n        return 7\r\n    if n == 8:\r\n        return 8\r\n    if n == 9:\r\n        return 9\r\n    if n == 10:\r\n        return 10\r\n    if n == 11:\r\n        return 11\r\n    if n == 12:\r\n        return 13\r\n    if n == 13:\r\n        return 13\r\n    if n == 14:\r\n        return 14\r\n    if n == 15:\r\n        return 15\r\n    if n == 16:\r\n        return 16\r\n    if n == 17:\r\n        return 17\r\n    if n == 18:\r\n        return 18\r\n    if n == 19:\r\n        return 19\r\n    if n == 20:\r\n        return 20\r\n    if n == 21:\r\n        return 21\r\n    if n == 22:\r\n        return 22\r\n    if n == 23:\r\n        return 23\r\n    if n == 24:\r\n        return 27\r\n    if n == 25:\r\n        return 27\r\n    if n == 26:\r\n        return 27\r\n    if n == 27:\r\n        return 27\r\n    if n == 28:\r\n        return 28\r\n    if n == 29:\r\n        return 29\r\n    if n == 30:\r\n        return 30\r\n    if n == 31:\r\n        return 31\r\n    if n == 32:\r\n"}
{"task_id": 417, "generation": "def group_tuples(test_tuples):\r\n  res = []\r\n  for i in test_tuples:\r\n    if i not in res:\r\n      res.append(i)\r\n  return res\n"}
{"task_id": 418, "generation": "def Find_Max(test_list):\r\n    max_len = 0\r\n    max_list = []\r\n    for i in test_list:\r\n        if len(i) > max_len:\r\n            max_len = len(i)\r\n            max_list = i\r\n    return max_list\n"}
{"task_id": 419, "generation": "def round_and_sum(num_list):\r\n    sum = 0\r\n    for i in num_list:\r\n        sum += round(i)\r\n    return sum * len(num_list)\n"}
{"task_id": 420, "generation": "def cube_Sum(n):\r\n    sum = 0\r\n    for i in range(2,n*2,2):\r\n        sum = sum + i**3\r\n    return sum\n"}
{"task_id": 421, "generation": "def concatenate_tuple(test_tup):\r\n  res = '-'.join(test_tup)\r\n  return res\n"}
{"task_id": 422, "generation": "def find_Average_Of_Cube(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i**3\r\n    return sum/n\n"}
{"task_id": 423, "generation": "def get_maxgold(gold,m,n):\r\n    for i in range(m-1,-1,-1):\r\n        for j in range(n):\r\n            if i==m-1:\r\n                gold[i][j]+=max(gold[i+1][j],gold[i+1][j+1])\r\n            elif j==0:\r\n                gold[i][j]+=max(gold[i+1][j],gold[i+1][j+1],gold[i+1][j+2])\r\n            elif j==n-1:\r\n                gold[i][j]+=max(gold[i+1][j],gold[i+1][j-1],gold[i+1][j])\r\n            else:\r\n                gold[i][j]+=max(gold[i+1][j],gold[i+1][j-1],gold[i+1][j+1],gold[i+1][j+2])\r\n    return max(gold[0][0],gold[0][1])\n"}
{"task_id": 424, "generation": "def extract_rear(test_tup):\r\n  res = []\r\n  for i in test_tup:\r\n    res.append(i[-1])\r\n  return res\n"}
{"task_id": 425, "generation": "def count_element_in_list(test_list, element):\r\n  count = 0\r\n  for i in test_list:\r\n    if element in i:\r\n      count += 1\r\n  return count\n"}
{"task_id": 426, "generation": "def filter_oddnumbers(lst):\r\n    return list(filter(lambda x: x%2==0, lst))\n"}
{"task_id": 427, "generation": "import re\r\ndef change_date_format(date):\r\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\r\n    result = re.search(pattern, date)\r\n    return result.group(2) + \"-\" + result.group(1) + \"-\" + result.group(3)\n"}
{"task_id": 428, "generation": "def shell_sort(arr):\r\n    n = len(arr)\r\n    gap = n//2\r\n    while gap > 0:\r\n        for i in range(gap, n):\r\n            temp = arr[i]\r\n            j = i\r\n            while j >= gap and arr[j-gap] > temp:\r\n                arr[j] = arr[j-gap]\r\n                j -= gap\r\n            arr[j] = temp\r\n        gap //= 2\r\n    return arr\n"}
{"task_id": 429, "generation": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\r\n  return (res)\n"}
{"task_id": 430, "generation": "import math\r\ndef parabola_directrix(a,b,c):\r\n    if a==0:\r\n        return -198\r\n    else:\r\n        return -b/a+math.sqrt(b**2-4*a*c)\n"}
{"task_id": 431, "generation": "def common_element(list1, list2):\r\n    result = None\r\n    for i in list1:\r\n        if i in list2:\r\n            result = True\r\n            break\r\n    return result\n"}
{"task_id": 432, "generation": "def median_trapezium(a,b,c):\r\n    return (a+b+c)/2\n"}
{"task_id": 433, "generation": "def check_greater(arr, num):\r\n    for i in arr:\r\n        if num > i:\r\n            return 'Yes, the entered number is greater than those in the array'\r\n    return 'No, entered number is less than those in the array'\n"}
{"task_id": 434, "generation": "def text_match_one(text):\r\n    if text.startswith('a') and text.endswith('b'):\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'\n"}
{"task_id": 435, "generation": "def last_Digit(n):\r\n    return n % 10\n"}
{"task_id": 436, "generation": "def neg_nos(lst):\r\n    neg_list = []\r\n    for i in lst:\r\n        if i < 0:\r\n            neg_list.append(i)\r\n    return neg_list\n"}
{"task_id": 437, "generation": "def remove_odd(test_str):\r\n  result = \"\"\r\n  for i in range(len(test_str)):\r\n    if i % 2 == 0:\r\n      result += test_str[i]\r\n  return result\n"}
{"task_id": 438, "generation": "def count_bidirectional(test_tup):\r\n  res = {}\r\n  for i in test_tup:\r\n    if i[0] in res:\r\n      res[i[0]] += 1\r\n    else:\r\n      res[i[0]] = 1\r\n    if i[1] in res:\r\n      res[i[1]] += 1\r\n    else:\r\n      res[i[1]] = 1\r\n  return len(res)\n"}
{"task_id": 439, "generation": "def multiple_to_single(lst):\r\n    return int(''.join(map(str, lst)))\n"}
{"task_id": 440, "generation": "```python\ndef find_adverb_position(sentence):\r\n    adverb_list = []\r\n    adverb_position = []\r\n    for i in range(len(sentence)):\r\n        if sentence[i] == '!' and sentence[i+1] == '!' and sentence[i+2] == '!' and sentence[i+3] == '!' and sentence[i+4] == '!' and sentence[i+5] == '!' and sentence[i+6] == '!' and sentence[i+7] == '!' and sentence[i+8] == '!' and sentence[i+9] == '!' and sentence[i+10] == '!' and sentence[i+11] == '!' and sentence[i+12] == '!' and sentence[i+13] == '!' and sentence[i+14] == '!' and sentence[i+15] == '!' and sentence[i+16] == '!' and sentence[i+17] == '!' and sentence[i+18] == '!' and sentence[i+19] == '!' and sentence[i+20] == '!' and sentence[i+21] == '!' and sentence[i+22] == '!' and sentence[i+23] == '!' and sentence[i+24] == '!' and sentence[i+25] == '!' and sentence[i+26] == '!' and sentence[i+27] == '!' and sentence[i+28] == '!' and sentence[i+29] == '!' and sentence[i+30] == '!' and sentence[i+31] == '!' and sentence[i+32] == '!' and sentence[i+33] == '!' and sentence[i+34] == '!' and sentence[i+35] == '!' and sentence[i+36] == '!' and sentence[i+37] == '!' and sentence[i+38] == '!' and sentence[i+39] == '!' and sentence[i+40] == '!' and sentence[i+41] == '!' and sentence[i+42] == '!' and sentence[i"}
{"task_id": 441, "generation": "def surfacearea_cube(n):\r\n    return 6*n**2\n"}
{"task_id": 442, "generation": "def positive_count(arr):\r\n    count = 0\r\n    for i in arr:\r\n        if i > 0:\r\n            count += 1\r\n    return count / len(arr)\n"}
{"task_id": 443, "generation": "def largest_neg(test_list):\r\n  res = max(test_list)\r\n  return res\n"}
{"task_id": 444, "generation": "def trim_tuple(test_tup_list, k):\r\n  res = []\r\n  for i in test_tup_list:\r\n    res.append(tuple(i[k:]))\r\n  return res\n"}
{"task_id": 445, "generation": "def index_multiplication(tup1, tup2):\r\n    res = []\r\n    for i in range(len(tup1)):\r\n        res.append((tup1[i][0] * tup2[i][0], tup1[i][1] * tup2[i][1]))\r\n    return tuple(res)\n"}
{"task_id": 446, "generation": "def count_Occurrence(tup, lst):\r\n    count = 0\r\n    for i in tup:\r\n        if i in lst:\r\n            count += 1\r\n    return count\n"}
{"task_id": 447, "generation": "def cube_nums(nums):\r\n    return list(map(lambda x: x**3, nums))\n"}
{"task_id": 448, "generation": "def cal_sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i\r\n    return sum\n"}
{"task_id": 449, "generation": "def check_Triangle(x1,y1,x2,y2,x3,y3):\r\n    if (x1 == x2 and y1 == y2) or (x1 == x3 and y1 == y3) or (x2 == x3 and y2 == y3):\r\n        return \"No\"\r\n    else:\r\n        return \"Yes\"\n"}
{"task_id": 450, "generation": "def extract_string(test_list, size):\r\n  res = []\r\n  for i in test_list:\r\n    if len(i) == size:\r\n      res.append(i)\r\n  return res\n"}
{"task_id": 451, "generation": "import re\r\ndef remove_whitespaces(string):\r\n    return re.sub(r'\\s+', '', string)\n"}
{"task_id": 452, "generation": "def loss_amount(amount,loss):\r\n  if amount<loss:\r\n    return None\r\n  else:\r\n    return amount-loss\n"}
{"task_id": 453, "generation": "def sumofFactors(n):\r\n    sum = 0\r\n    for i in range(1, n):\r\n        if n % i == 0 and i % 2 == 0:\r\n            sum = sum + i\r\n    return sum\n"}
{"task_id": 454, "generation": "def text_match_wordz(text):\r\n    if text.find('z')!= -1:\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'\n"}
{"task_id": 455, "generation": "def check_monthnumb_number(month_number):\r\n    if month_number in (1, 3, 5, 7, 8, 10, 12):\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": 456, "generation": "def reverse_string_list(test_list):\r\n  return [i[::-1] for i in test_list]\n"}
{"task_id": 457, "generation": "def Find_Min(test_list):\r\n    min_len = len(test_list[0])\r\n    for i in test_list:\r\n        if len(i) < min_len:\r\n            min_len = len(i)\r\n    return [i for i in test_list if len(i) == min_len]\n"}
{"task_id": 458, "generation": "def rectangle_area(l,b):\r\n    return l*b\n"}
{"task_id": 459, "generation": "import re\r\ndef remove_uppercase(test_str):\r\n  result = re.sub(r'[A-Z]+', '', test_str)\r\n  return result\n"}
{"task_id": 460, "generation": "def Extract(test_list):\r\n    result = []\r\n    for sublist in test_list:\r\n        result.append(sublist[0])\r\n    return result\n"}
{"task_id": 461, "generation": "def upper_ctr(str):\r\n    ctr = 0\r\n    for i in str:\r\n        if i.isupper():\r\n            ctr += 1\r\n    return ctr\n"}
{"task_id": 462, "generation": "def combinations_list(lst):\r\n    if len(lst) == 0:\r\n        return [[]]\r\n    else:\r\n        return [ [lst[0]] + x for x in combinations_list(lst[1:]) ] + combinations_list(lst[1:])\n"}
{"task_id": 463, "generation": "def max_subarray_product(arr):\r\n    max_ending_here = max_so_far = arr[0]\r\n    min_ending_here = min_so_far = arr[0]\r\n    for i in range(1, len(arr)):\r\n        temp = max_ending_here\r\n        max_ending_here = max(arr[i], max(max_ending_here * arr[i], min_ending_here * arr[i]))\r\n        min_ending_here = min(arr[i], min(temp * arr[i], min_ending_here * arr[i]))\r\n        if max_ending_here > max_so_far:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\n"}
{"task_id": 464, "generation": "def check_value(dict, value):\r\n    return all(value == dict[key] for key in dict)\n"}
{"task_id": 465, "generation": "def drop_empty(test_dict):\r\n  res = dict()\r\n  for key, value in test_dict.items():\r\n    if value:\r\n      res[key] = value\r\n  return res\n"}
{"task_id": 466, "generation": "def find_peak(arr, n): \r\n    if n == 1: \r\n        return 0\r\n    if arr[0] >= arr[1]: \r\n        return 0\r\n    if arr[n - 1] >= arr[n - 2]: \r\n        return n - 1\r\n    for i in range(1, n - 1): \r\n        if arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]: \r\n            return i\r\n    return -1\n"}
{"task_id": 467, "generation": "def decimal_to_Octal(n):\r\n    return oct(n)\n"}
{"task_id": 468, "generation": "def max_product(arr, n): \r\n    max_ending_here = arr[0] \r\n    min_ending_here = arr[0] \r\n    max_so_far = arr[0] \r\n    for i in range(1, n): \r\n        temp = max_ending_here \r\n        max_ending_here = max(arr[i], max(max_ending_here * arr[i], min_ending_here * arr[i])) \r\n        min_ending_here = min(arr[i], min(temp * arr[i], min_ending_here * arr[i])) \r\n        max_so_far = max(max_so_far, max_ending_here) \r\n    return max_so_far\n"}
{"task_id": 469, "generation": "def max_profit(prices, k):\r\n    if k >= len(prices) / 2:\r\n        return sum(prices) - min(prices)\r\n    profit = 0\r\n    for i in range(1, len(prices)):\r\n        if prices[i] > prices[i - 1]:\r\n            profit += prices[i] - prices[i - 1]\r\n    return profit\n"}
{"task_id": 470, "generation": "def add_pairwise(test_tup):\r\n  res = tuple(map(lambda x, y: x + y, test_tup[0::2], test_tup[1::2]))\r\n  return res\n"}
{"task_id": 471, "generation": "def find_remainder(arr,n,m):\r\n    result = 0\r\n    for i in arr:\r\n        result = (result + i) % n\r\n    return result % m\n"}
{"task_id": 472, "generation": "def check_Consecutive(lst):\r\n    lst.sort()\r\n    for i in range(len(lst)-1):\r\n        if lst[i+1] - lst[i]!= 1:\r\n            return False\r\n    return True\n"}
{"task_id": 473, "generation": "def tuple_intersection(tup1, tup2):\r\n  res = set()\r\n  for i in tup1:\r\n    for j in tup2:\r\n      if i == j:\r\n        res.add(i)\r\n  return res\n"}
{"task_id": 474, "generation": "def replace_char(string,old,new):\r\n  return string.replace(old,new)\n"}
{"task_id": 475, "generation": "def sort_counter(counter):\r\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n"}
{"task_id": 476, "generation": "def big_sum(arr):\r\n    return max(arr) + min(arr)\n"}
{"task_id": 477, "generation": "def is_lower(test_str):\r\n    return test_str.lower()\n"}
{"task_id": 478, "generation": "def remove_lowercase(s):\r\n    return ''.join([i for i in s if i.isupper()])\n"}
{"task_id": 479, "generation": "def first_Digit(n):\r\n    return n // 10 ** (len(str(n)) - 1)\n"}
{"task_id": 480, "generation": "def get_max_occuring_char(test_str):\r\n  max_count = 0\r\n  max_char = ''\r\n  for i in test_str:\r\n    count = test_str.count(i)\r\n    if count > max_count:\r\n      max_count = count\r\n      max_char = i\r\n  return max_char\n"}
{"task_id": 481, "generation": "def is_subset_sum(arr, n, sum): \r\n    if sum == 0: \r\n        return True\r\n    if n == 0 and sum!= 0: \r\n        return False\r\n    if arr[n-1] > sum: \r\n        return is_subset_sum(arr, n-1, sum) \r\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])\n"}
{"task_id": 482, "generation": "import re\r\ndef match(s):\r\n    pattern = r\"[A-Z][a-z]+\"\r\n    if re.search(pattern, s):\r\n        return \"Yes\"\r\n    else:\r\n        return \"No\"\n"}
{"task_id": 483, "generation": "def first_Factorial_Divisible_Number(x):\r\n    i = 1\r\n    while True:\r\n        if i % x == 0:\r\n            return i\r\n        i += 1\n"}
{"task_id": 484, "generation": "def remove_matching_tuple(test_tup1, test_tup2):\r\n  res = []\r\n  for i in test_tup1:\r\n    if i not in test_tup2:\r\n      res.append(i)\r\n  return res\n"}
{"task_id": 485, "generation": "def largest_palindrome(arr, n): \r\n    max_palindrome = 0\r\n    for i in range(0, n): \r\n        for j in range(i + 1, n): \r\n            if (arr[i] * arr[j] > max_palindrome): \r\n                if (str(arr[i]) == str(arr[j])[::-1]): \r\n                    max_palindrome = arr[i] * arr[j] \r\n    return max_palindrome\n"}
{"task_id": 486, "generation": "def binomial_probability(n, k, p):\r\n    return (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * ((1 - p) ** (n - k))\n"}
{"task_id": 487, "generation": "def sort_tuple(test_tup):\r\n  return sorted(test_tup, key=lambda x: x[1])\n"}
{"task_id": 488, "generation": "import math\r\ndef area_pentagon(n):\r\n    return (5 * (n**2) * math.sin(math.pi/5))/2\n"}
{"task_id": 489, "generation": "def frequency_Of_Largest(n,arr):\r\n    max_value = max(arr)\r\n    count = 0\r\n    for i in arr:\r\n        if i == max_value:\r\n            count += 1\r\n    return count\n"}
{"task_id": 490, "generation": "def extract_symmetric(test_tup_list):\r\n    res = set()\r\n    for i in test_tup_list:\r\n        if i[0] == i[1]:\r\n            res.add(i)\r\n    return res\n"}
{"task_id": 491, "generation": "def sum_gp(a,r,n):\r\n    return a*(1-pow(r,n))/1-r\n"}
{"task_id": 492, "generation": "def binary_search(arr, x):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    mid = 0\r\n    while low <= high:\r\n        mid = (high + low) // 2\r\n        if arr[mid] < x:\r\n            low = mid + 1\r\n        elif arr[mid] > x:\r\n            high = mid - 1\r\n        else:\r\n            return True\r\n    return False\n"}
{"task_id": 493, "generation": "import math\r\ndef calculate_polygons(x1, y1, x2, y2, n):\r\n    res = []\r\n    for i in range(n):\r\n        res.append([])\r\n        for j in range(n):\r\n            res[i].append((x1 + (i - n/2) * (x2 - x1) / n, y1 + (j - n/2) * (y2 - y1) / n))\r\n    return res\n"}
{"task_id": 494, "generation": "def binary_to_integer(binary_tuple):\r\n    binary_string = ''.join(map(str, binary_tuple))\r\n    return int(binary_string, 2)\n"}
{"task_id": 495, "generation": "import re\r\ndef remove_lowercase(test_str):\r\n  result = re.sub(r'[a-z]+', '', test_str)\r\n  return result\n"}
{"task_id": 496, "generation": "import heapq\r\ndef heap_queue_smallest(lst, k):\r\n    heapq.heapify(lst)\r\n    return heapq.nsmallest(k, lst)\n"}
{"task_id": 497, "generation": "import math\r\ndef surfacearea_cone(r,h):\r\n    return 2*math.pi*r*(r+math.sqrt(r*r+h*h))\n"}
{"task_id": 498, "generation": "def gcd(a, b):\r\n    if a == 0:\r\n        return b\r\n    return gcd(b % a, a)\n"}
{"task_id": 499, "generation": "import math\r\ndef diameter_circle(r):\r\n    return 2*r*math.pi\n"}
{"task_id": 500, "generation": "def concatenate_elements(test_list):\r\n  result =''.join(test_list)\r\n  return result\n"}
{"task_id": 501, "generation": "def num_comm_div(n1, n2):\r\n    if n1 > n2:\r\n        n1, n2 = n2, n1\r\n    for i in range(1, n1+1):\r\n        if n1 % i == 0 and n2 % i == 0:\r\n            return i\n"}
{"task_id": 502, "generation": "def find(a,b):\r\n    return a%b\n"}
{"task_id": 503, "generation": "def add_consecutive_nums(lst):\r\n    result = []\r\n    for i in range(len(lst)-1):\r\n        result.append(lst[i]+lst[i+1])\r\n    return result\n"}
{"task_id": 504, "generation": "def sum_Of_Series(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum = sum + i*i*i\r\n    return sum\n"}
{"task_id": 505, "generation": "def re_order(arr):\r\n    count = 0\r\n    for i in range(len(arr)):\r\n        if arr[i]!= 0:\r\n            arr[count] = arr[i]\r\n            count += 1\r\n    while count < len(arr):\r\n        arr[count] = 0\r\n        count += 1\r\n    return arr\n"}
{"task_id": 506, "generation": "def permutation_coefficient(n, k):\r\n    if k == 0 or k == n:\r\n        return 1\r\n    else:\r\n        return n * permutation_coefficient(n-1, k-1)\n"}
{"task_id": 507, "generation": "def remove_words(test_list, test_tuple):\r\n  res = []\r\n  for i in test_list:\r\n    if i not in test_tuple:\r\n      res.append(i)\r\n  return res\n"}
{"task_id": 508, "generation": "def same_order(lst1, lst2):\r\n    if len(lst1)!= len(lst2):\r\n        return False\r\n    else:\r\n        for i in range(len(lst1)):\r\n            if lst1[i]!= lst2[i]:\r\n                return False\r\n        return True\n"}
{"task_id": 509, "generation": "def average_Odd(n):\r\n    sum = 0\r\n    for i in range(1,n+1,2):\r\n        sum = sum + i\r\n    return sum/n\n"}
{"task_id": 510, "generation": "def no_of_subsequences(arr, k):\r\n    n = len(arr)\r\n    dp = [0] * (n + 1)\r\n    dp[0] = 1\r\n    for i in range(1, n + 1):\r\n        for j in range(i):\r\n            if arr[j] * arr[i - 1] < k:\r\n                dp[i] += dp[j]\r\n    return dp[n]\n"}
